openapi: 3.0.0
info:
  title: Catapult REST Endpoints
  version: 1.0.4
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  description: OpenAPI Specification of catapult-rest
tags:
  - name: Account routes
  - name: Block routes
  - name: Chain routes
  - name: Finalization routes
  - name: Network routes
  - name: Node routes
  - name: Transaction routes
  - name: Transaction status routes
  - name: Hash Lock routes
  - name: Secret Lock routes
  - name: Metadata routes
  - name: Mosaic routes
  - name: Multisig routes
  - name: Namespace routes
  - name: Receipt routes
  - name: Restriction Account routes
  - name: Restriction Mosaic routes
paths:
  /account/{address}/multisig:
    get:
      operationId: Multisig_getAccountMultisig
      summary: Get multisig account information
      description: Returns the multisig account information.
      parameters:
        - $ref: '#/components/parameters/Parameters.address'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MultisigAccountInfoDTO'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelError'
        '409':
          description: The request conflicts with the current state of the server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelError'
      tags:
        - Multisig routes
  /account/{address}/multisig/graph:
    get:
      operationId: Multisig_getAccountMultisigGraph
      summary: Get multisig account graph information
      description: Returns the multisig account graph.
      parameters:
        - $ref: '#/components/parameters/Parameters.address'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MultisigAccountGraphInfoDTO'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelError'
        '409':
          description: The request conflicts with the current state of the server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelError'
      tags:
        - Multisig routes
  /account/{address}/multisig/merkle:
    get:
      operationId: Multisig_getAccountMultisigMerkle
      summary: Get multisig account merkle information
      description: Returns the multisig account merkle information.
      parameters:
        - $ref: '#/components/parameters/Parameters.address'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MerkleStateInfoDTO'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelError'
        '409':
          description: The request conflicts with the current state of the server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelError'
      tags:
        - Multisig routes
  /accounts:
    get:
      operationId: Account_searchAccounts
      summary: Search accounts
      description: Gets an array of accounts.
      parameters:
        - $ref: '#/components/parameters/Parameters.pageSizeQuery'
        - $ref: '#/components/parameters/Parameters.pageNumberQuery'
        - $ref: '#/components/parameters/Parameters.offsetQuery'
        - $ref: '#/components/parameters/Parameters.orderQuery'
        - $ref: '#/components/parameters/Parameters.orderByAccountQuery'
        - $ref: '#/components/parameters/Parameters.mosaicIdQuery'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountPage'
        '409':
          description: The request conflicts with the current state of the server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelError'
      tags:
        - Account routes
    post:
      operationId: Account_getAccountsInfo
      summary: Get accounts information
      description: Returns the account information for an array of accounts.
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AccountInfoDTO'
        '400':
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelError'
        '409':
          description: The request conflicts with the current state of the server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelError'
      tags:
        - Account routes
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/accountIds'
  /accounts/{accountId}:
    get:
      operationId: Account_getAccountInfo
      summary: Get account information
      description: Returns the account information.
      parameters:
        - $ref: '#/components/parameters/Parameters.accountIdPath'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountInfoDTO'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelError'
        '409':
          description: The request conflicts with the current state of the server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelError'
      tags:
        - Account routes
  /accounts/{accountId}/merkle:
    get:
      operationId: Account_getAccountInfoMerkle
      summary: Get account merkle information
      description: Returns the account merkle information.
      parameters:
        - $ref: '#/components/parameters/Parameters.accountIdPath'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MerkleStateInfoDTO'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelError'
        '409':
          description: The request conflicts with the current state of the server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelError'
      tags:
        - Account routes
  /blocks:
    get:
      operationId: Block_searchBlocks
      summary: Search blocks
      description: Gets an array of blocks.
      parameters:
        - $ref: '#/components/parameters/Parameters.signerPublicKeyQuery'
        - $ref: '#/components/parameters/Parameters.beneficiaryAddressQuery'
        - $ref: '#/components/parameters/Parameters.pageSizeQuery'
        - $ref: '#/components/parameters/Parameters.pageNumberQuery'
        - $ref: '#/components/parameters/Parameters.offsetQuery'
        - $ref: '#/components/parameters/Parameters.orderQuery'
        - $ref: '#/components/parameters/Parameters.orderByBlockQuery'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlockPage'
        '409':
          description: The request conflicts with the current state of the server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelError'
      tags:
        - Block routes
  /blocks/{height}:
    get:
      operationId: Block_getBlockByHeight
      summary: Get block information
      description: Gets a block from the chain that has the given height.
      parameters:
        - $ref: '#/components/parameters/Parameters.heightPath'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlockInfoDTO'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelError'
        '409':
          description: The request conflicts with the current state of the server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelError'
      tags:
        - Block routes
  /blocks/{height}/statements/{hash}/merkle:
    get:
      operationId: Block_getMerkleReceipts
      summary: Get the merkle path for a given a receipt statement hash and block
      description: |-
        Returns the merkle path for a receipt statement or resolution linked to a block.
        The merkle path is the minimum number of nodes needed to calculate the merkle root.

        Steps to calculate the merkle root:
        1. proofHash = hash (leaf).
        2. Concatenate proofHash with the first unprocessed item from the merklePath list as follows:
        * a) If item.position == left -> proofHash = sha_256(item.hash + proofHash).
        * b) If item.position == right -> proofHash = sha_256(proofHash+ item.hash).
        3. Repeat 2. for every item in the merklePath list.
        4. Compare if the calculated proofHash equals the one recorded in the
        block header (block.receiptsHash) to verify if the statement was linked with the block.
      parameters:
        - $ref: '#/components/parameters/Parameters.heightPath'
        - $ref: '#/components/parameters/Parameters.receiptHashPath'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MerkleProofInfoDTO'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelError'
        '409':
          description: The request conflicts with the current state of the server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelError'
      tags:
        - Block routes
  /blocks/{height}/transactions/{hash}/merkle:
    get:
      operationId: Block_getMerkleTransaction
      summary: Get the merkle path for a given a transaction and block
      description: |-
        Returns the merkle path for a transaction included in a block.
        The merkle path is the minimum number of nodes needed to calculate the merkle root.

        Steps to calculate the merkle root:
        1. proofHash = hash (leaf).
        2. Concatenate proofHash with the first unprocessed item from the merklePath list as follows:
        * a) If item.position == left -> proofHash = sha_256(item.hash + proofHash).
        * b) If item.position == right -> proofHash = sha_256(proofHash+ item.hash).
        3. Repeat 2. for every item in the merklePath list.
        4. Compare if the calculated proofHash equals the one recorded in the
        block header (block.transactionsHash) to verify if the transaction was included in the block.
      parameters:
        - $ref: '#/components/parameters/Parameters.heightPath'
        - $ref: '#/components/parameters/Parameters.transactionHashPath'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MerkleProofInfoDTO'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelError'
        '409':
          description: The request conflicts with the current state of the server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelError'
      tags:
        - Block routes
  /chain/info:
    get:
      operationId: Chain_getChainInfo
      summary: Get the current information of the chain
      description: |-
        Returns the current information of the blockchain.

        The higher the score, the better the chain.
        During synchronization, nodes try to get the best blockchain in the network.

        The score for a block is derived from its difficulty and the time (in seconds) that has elapsed since the last block:

        block score = difficulty − time elapsed since last block
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChainInfoDTO'
      tags:
        - Chain routes
  /finalization/proof/epoch/{epoch}:
    get:
      operationId: Proof_getFinalizationProofAtEpoch
      summary: Get finalization proof
      description: Gets finalization proof for the greatest height associated with the given epoch.
      parameters:
        - name: epoch
          in: path
          required: true
          description: Finalization epoch.
          schema:
            $ref: '#/components/schemas/FinalizationEpoch'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FinalizationProofDTO'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelError'
        '409':
          description: The request conflicts with the current state of the server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelError'
      tags:
        - Finalization routes
  /finalization/proof/height/{height}:
    get:
      operationId: Proof_getFinalizationProofAtHeight
      summary: Get finalization proof
      description: Gets finalization proof at the given height.
      parameters:
        - $ref: '#/components/parameters/Parameters.heightPath'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FinalizationProofDTO'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelError'
        '409':
          description: The request conflicts with the current state of the server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelError'
      tags:
        - Finalization routes
  /lock/hash:
    get:
      operationId: Hash_searchHashLock
      summary: Search hash lock entries
      description: Returns an array of hash locks.
      parameters:
        - $ref: '#/components/parameters/Parameters.addressQuery'
        - $ref: '#/components/parameters/Parameters.pageSizeQuery'
        - $ref: '#/components/parameters/Parameters.pageNumberQuery'
        - $ref: '#/components/parameters/Parameters.offsetQuery'
        - $ref: '#/components/parameters/Parameters.orderQuery'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HashLockPage'
        '409':
          description: The request conflicts with the current state of the server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelError'
      tags:
        - Hash Lock routes
  /lock/hash/{hash}:
    get:
      operationId: Hash_getHashLock
      summary: Get hash lock information
      description: Gets the hash lock for a given hash.
      parameters:
        - $ref: '#/components/parameters/Parameters.hashPath'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HashLockInfoDTO'
        '409':
          description: The request conflicts with the current state of the server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelError'
      tags:
        - Hash Lock routes
  /lock/hash/{hash}/merkle:
    get:
      operationId: Hash_getHashLockMerkle
      summary: Get hash lock merkle information
      description: Gets the hash lock merkle for a given hash.
      parameters:
        - $ref: '#/components/parameters/Parameters.hashPath'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MerkleStateInfoDTO'
        '409':
          description: The request conflicts with the current state of the server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelError'
      tags:
        - Hash Lock routes
  /lock/secret:
    get:
      operationId: Secret_searchSecretLock
      summary: Search secret lock entries
      description: Returns an array of secret locks.
      parameters:
        - $ref: '#/components/parameters/Parameters.addressQuery'
        - $ref: '#/components/parameters/Parameters.secretQuery'
        - $ref: '#/components/parameters/Parameters.pageSizeQuery'
        - $ref: '#/components/parameters/Parameters.pageNumberQuery'
        - $ref: '#/components/parameters/Parameters.offsetQuery'
        - $ref: '#/components/parameters/Parameters.orderQuery'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SecretLockPage'
        '409':
          description: The request conflicts with the current state of the server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelError'
      tags:
        - Secret Lock routes
  /lock/secret/{compositeHash}:
    get:
      operationId: Secret_getSecretLock
      summary: Get secret lock information
      description: Gets the hash lock for a given composite hash.
      parameters:
        - $ref: '#/components/parameters/Parameters.compositeHashPath'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SecretLockInfoDTO'
        '409':
          description: The request conflicts with the current state of the server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelError'
      tags:
        - Secret Lock routes
  /lock/secret/{compositeHash}/merkle:
    get:
      operationId: Secret_getSecretLockMerkle
      summary: Get secret lock merkle information
      description: Gets the hash lock merkle for a given composite hash.
      parameters:
        - $ref: '#/components/parameters/Parameters.compositeHashPath'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MerkleStateInfoDTO'
        '409':
          description: The request conflicts with the current state of the server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelError'
      tags:
        - Secret Lock routes
  /metadata:
    get:
      operationId: Metadata_searchMetadataEntries
      summary: Search metadata entries
      description: Returns an array of metadata.
      parameters:
        - $ref: '#/components/parameters/Parameters.sourceAddressQuery'
        - $ref: '#/components/parameters/Parameters.targetAddressQuery'
        - $ref: '#/components/parameters/Parameters.scopedMetadataKeyQuery'
        - $ref: '#/components/parameters/Parameters.targetIdQuery'
        - $ref: '#/components/parameters/Parameters.metadataType'
        - $ref: '#/components/parameters/Parameters.pageSizeQuery'
        - $ref: '#/components/parameters/Parameters.pageNumberQuery'
        - $ref: '#/components/parameters/Parameters.offsetQuery'
        - $ref: '#/components/parameters/Parameters.orderQuery'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MetadataPage'
        '409':
          description: The request conflicts with the current state of the server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelError'
      tags:
        - Metadata routes
  /metadata/{compositeHash}:
    get:
      operationId: Metadata_getMetadata
      summary: Get metadata information
      description: Gets the metadata for a given composite hash.
      parameters:
        - $ref: '#/components/parameters/Parameters.compositeHashPath'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MetadataInfoDTO'
        '409':
          description: The request conflicts with the current state of the server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelError'
      tags:
        - Metadata routes
  /metadata/{compositeHash}/merkle:
    get:
      operationId: Metadata_getMetadataMerkle
      summary: Get metadata merkle information
      description: Gets the metadata merkle for a given composite hash.
      parameters:
        - $ref: '#/components/parameters/Parameters.compositeHashPath'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MerkleStateInfoDTO'
        '409':
          description: The request conflicts with the current state of the server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelError'
      tags:
        - Metadata routes
  /mosaics:
    get:
      operationId: Mosaic_searchMosaics
      summary: Search mosaics
      description: Gets an array of mosaics.
      parameters:
        - $ref: '#/components/parameters/Parameters.ownerAddressQuery'
        - $ref: '#/components/parameters/Parameters.pageSizeQuery'
        - $ref: '#/components/parameters/Parameters.pageNumberQuery'
        - $ref: '#/components/parameters/Parameters.offsetQuery'
        - $ref: '#/components/parameters/Parameters.orderQuery'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MosaicPage'
        '409':
          description: The request conflicts with the current state of the server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelError'
      tags:
        - Mosaic routes
    post:
      operationId: Mosaic_getMosaics
      summary: Get mosaics information for an array of mosaics
      description: Gets an array of mosaic definition.
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MosaicInfoDTO'
        '400':
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelError'
        '409':
          description: The request conflicts with the current state of the server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelError'
      tags:
        - Mosaic routes
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/mosaicIds'
  /mosaics/{mosaicId}:
    get:
      operationId: Mosaic_getMosaic
      summary: Get mosaic information
      description: Gets the mosaic definition for a given mosaic identifier.
      parameters:
        - $ref: '#/components/parameters/Parameters.mosaicIdPath'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MosaicInfoDTO'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelError'
        '409':
          description: The request conflicts with the current state of the server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelError'
      tags:
        - Mosaic routes
  /mosaics/{mosaicId}/merkle:
    get:
      operationId: Mosaic_getMosaicMerkle
      summary: Get mosaic merkle information
      description: Gets the mosaic definition merkle for a given mosaic identifier.
      parameters:
        - $ref: '#/components/parameters/Parameters.mosaicIdPath'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MerkleStateInfoDTO'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelError'
        '409':
          description: The request conflicts with the current state of the server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelError'
      tags:
        - Mosaic routes
  /namespaces:
    get:
      operationId: Namespace_searchNamespaces
      summary: Search namespaces
      description: Gets an array of namespaces.
      parameters:
        - $ref: '#/components/parameters/Parameters.ownerAddressQuery'
        - $ref: '#/components/parameters/Parameters.registrationTypeQuery'
        - $ref: '#/components/parameters/Parameters.level0Query'
        - $ref: '#/components/parameters/Parameters.aliasTypeQuery'
        - $ref: '#/components/parameters/Parameters.pageSizeQuery'
        - $ref: '#/components/parameters/Parameters.pageNumberQuery'
        - $ref: '#/components/parameters/Parameters.offsetQuery'
        - $ref: '#/components/parameters/Parameters.orderQuery'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NamespacePage'
        '409':
          description: The request conflicts with the current state of the server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelError'
      tags:
        - Namespace routes
  /namespaces/account/names:
    post:
      operationId: Account_getAccountsNames
      summary: Get readable names for a set of accountIds
      description: Returns friendly names for accounts.
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountsNamesDTO'
        '400':
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelError'
        '409':
          description: The request conflicts with the current state of the server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelError'
      tags:
        - Namespace routes
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/addresses'
  /namespaces/mosaic/names:
    post:
      operationId: Mosaic_getMosaicsNames
      summary: Get readable names for a set of mosaics
      description: Returns friendly names for mosaics.
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MosaicsNamesDTO'
        '400':
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelError'
        '409':
          description: The request conflicts with the current state of the server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelError'
      tags:
        - Namespace routes
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/mosaicIds'
  /namespaces/names:
    post:
      operationId: Namespace_getNamespacesNames
      summary: Get readable names for a set of namespaces
      description: Returns friendly names for namespaces.
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/NamespaceNameDTO'
        '400':
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelError'
        '409':
          description: The request conflicts with the current state of the server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelError'
      tags:
        - Namespace routes
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/namespaceIds'
  /namespaces/{namespaceId}:
    get:
      operationId: Namespace_getNamespace
      summary: Get namespace information
      description: Gets the namespace for a given namespace identifier.
      parameters:
        - $ref: '#/components/parameters/Parameters.namespaceIdPath'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NamespaceInfoDTO'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelError'
        '409':
          description: The request conflicts with the current state of the server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelError'
      tags:
        - Namespace routes
  /namespaces/{namespaceId}/merkle:
    get:
      operationId: Namespace_getNamespaceMerkle
      summary: Get namespace merkle information
      description: Gets the namespace merkle for a given namespace identifier.
      parameters:
        - $ref: '#/components/parameters/Parameters.namespaceIdPath'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MerkleStateInfoDTO'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelError'
        '409':
          description: The request conflicts with the current state of the server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelError'
      tags:
        - Namespace routes
  /network:
    get:
      operationId: Network_getNetworkType
      summary: Get the current network type of the chain
      description: Returns the current network type.
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NetworkTypeDTO'
      tags:
        - Network routes
  /network/fees/rental:
    get:
      operationId: Fee_getRentalFees
      summary: Get rental fees information
      description: |-
        Returns the estimated effective rental fees for namespaces and mosaics.
        This endpoint is only available if the REST instance has access to catapult-server ``resources/config-network.properties`` file.
        To activate this feature, add the setting "network.propertiesFilePath" in the configuration file (rest/resources/rest.json).
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RentalFeesDTO'
        '409':
          description: The request conflicts with the current state of the server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelError'
      tags:
        - Network routes
  /network/fees/transaction:
    get:
      operationId: Fee_getTransactionFees
      summary: Get transaction fees information
      description: |-
        Returns the average, median, highest and lower fee multiplier over the last "numBlocksTransactionFeeStats".
        The setting "numBlocksTransactionFeeStats" is adjustable via the configuration file (rest/resources/rest.json) per REST instance.
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionFeesDTO'
      tags:
        - Network routes
  /network/properties:
    get:
      operationId: Network_getNetworkProperties
      summary: Get the network properties
      description: |-
        Returns the content from a catapult-server network configuration file (resources/config-network.properties).
        To enable this feature, the REST setting "network.propertiesFilePath" must define where the file is located.
        This is adjustable via the configuration file (rest/resources/rest.json) per REST instance.
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NetworkConfigurationDTO'
        '409':
          description: The request conflicts with the current state of the server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelError'
      tags:
        - Network routes
  /node/health:
    get:
      operationId: Node_getNodeHealth
      summary: Get the node health information
      description: Supplies information regarding the connection and services status.
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodeHealthInfoDTO'
        '503':
          description: Service unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodeHealthInfoDTO'
      tags:
        - Node routes
  /node/info:
    get:
      operationId: Node_getNodeInfo
      summary: Get the node information
      description: Supplies additional information about the application running on a node.
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodeInfoDTO'
      tags:
        - Node routes
  /node/peers:
    get:
      operationId: Node_getNodePeers
      summary: Get peers information
      description: Gets the list of peers visible by the node.
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/NodeInfoDTO'
      tags:
        - Node routes
  /node/server:
    get:
      operationId: Node_getServerInfo
      summary: Get the version of the running REST component
      description: Returns the version of the running catapult-rest component.
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerInfoDTO'
      tags:
        - Node routes
  /node/storage:
    get:
      operationId: Node_getNodeStorage
      summary: Get the storage information of the node
      description: Returns storage information about the node.
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StorageInfoDTO'
      tags:
        - Node routes
  /node/time:
    get:
      operationId: Node_getNodeTime
      summary: Get the node time
      description: Gets the node time at the moment the reply was sent and received.
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodeTimeDTO'
      tags:
        - Node routes
  /node/unlockedaccount:
    get:
      operationId: Node_getUnlockedAccount
      summary: Get the unlocked harvesting account public keys.
      description: Returns array of unlocked account public keys.
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnlockedAccountDTO'
      tags:
        - Node routes
  /restrictions/account:
    get:
      operationId: Account_searchAccountRestrictions
      summary: Search account restrictions
      description: Returns an array of account restrictions.
      parameters:
        - $ref: '#/components/parameters/Parameters.addressQuery'
        - $ref: '#/components/parameters/Parameters.pageSizeQuery'
        - $ref: '#/components/parameters/Parameters.pageNumberQuery'
        - $ref: '#/components/parameters/Parameters.offsetQuery'
        - $ref: '#/components/parameters/Parameters.orderQuery'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountRestrictionsPage'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelError'
        '409':
          description: The request conflicts with the current state of the server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelError'
      tags:
        - Restriction Account routes
  /restrictions/account/{address}:
    get:
      operationId: Account_getAccountRestrictions
      summary: Get the account restrictions
      description: Returns the account restrictions for a given address.
      parameters:
        - $ref: '#/components/parameters/Parameters.address'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountRestrictionsInfoDTO'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelError'
        '409':
          description: The request conflicts with the current state of the server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelError'
      tags:
        - Restriction Account routes
  /restrictions/account/{address}/merkle:
    get:
      operationId: Account_getAccountRestrictionsMerkle
      summary: Get the account restrictions merkle
      description: Returns the account restrictions merkle for a given address.
      parameters:
        - $ref: '#/components/parameters/Parameters.address'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MerkleStateInfoDTO'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelError'
        '409':
          description: The request conflicts with the current state of the server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelError'
      tags:
        - Restriction Account routes
  /restrictions/mosaic:
    get:
      operationId: Mosaic_searchMosaicRestrictions
      summary: Search mosaic restrictions
      description: Returns an array of mosaic restrictions.
      parameters:
        - $ref: '#/components/parameters/Parameters.mosaicIdQuery'
        - $ref: '#/components/parameters/Parameters.entryType'
        - $ref: '#/components/parameters/Parameters.targetAddressQuery'
        - $ref: '#/components/parameters/Parameters.pageSizeQuery'
        - $ref: '#/components/parameters/Parameters.pageNumberQuery'
        - $ref: '#/components/parameters/Parameters.offsetQuery'
        - $ref: '#/components/parameters/Parameters.orderQuery'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MosaicRestrictionsPage'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelError'
        '409':
          description: The request conflicts with the current state of the server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelError'
      tags:
        - Restriction Mosaic routes
  /restrictions/mosaic/{compositeHash}:
    get:
      operationId: Mosaic_getMosaicRestrictions
      summary: Get the mosaic restrictions
      description: Returns the mosaic restrictions for a composite hash.
      parameters:
        - $ref: '#/components/parameters/Parameters.compositeHashPath'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MosaicRestrictionDTO'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelError'
        '409':
          description: The request conflicts with the current state of the server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelError'
      tags:
        - Restriction Mosaic routes
  /restrictions/mosaic/{compositeHash}/merkle:
    get:
      operationId: Mosaic_getMosaicRestrictionsMerkle
      summary: Get the mosaic restrictions merkle
      description: Returns the mosaic restrictions merkle for a given composite hash.
      parameters:
        - $ref: '#/components/parameters/Parameters.compositeHashPath'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MerkleStateInfoDTO'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelError'
        '409':
          description: The request conflicts with the current state of the server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelError'
      tags:
        - Restriction Mosaic routes
  /statements/resolutions/address:
    get:
      operationId: Resolution_searchAddressResolutionStatements
      summary: Get receipts address resolution statements
      description: Gets an array of address resolution statements.
      parameters:
        - $ref: '#/components/parameters/Parameters.heightQuery'
        - $ref: '#/components/parameters/Parameters.pageSizeQuery'
        - $ref: '#/components/parameters/Parameters.pageNumberQuery'
        - $ref: '#/components/parameters/Parameters.offsetQuery'
        - $ref: '#/components/parameters/Parameters.orderQuery'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResolutionStatementPage'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelError'
        '409':
          description: The request conflicts with the current state of the server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelError'
      tags:
        - Receipt routes
  /statements/resolutions/mosaic:
    get:
      operationId: Resolution_searchMosaicResolutionStatements
      summary: Get receipts mosaic resolution statements
      description: Gets an array of mosaic resolution statements.
      parameters:
        - $ref: '#/components/parameters/Parameters.heightQuery'
        - $ref: '#/components/parameters/Parameters.pageSizeQuery'
        - $ref: '#/components/parameters/Parameters.pageNumberQuery'
        - $ref: '#/components/parameters/Parameters.offsetQuery'
        - $ref: '#/components/parameters/Parameters.orderQuery'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResolutionStatementPage'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelError'
        '409':
          description: The request conflicts with the current state of the server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelError'
      tags:
        - Receipt routes
  /statements/transaction:
    get:
      operationId: Statement_searchReceipts
      summary: Search transaction statements
      description: Gets an array of transaction statements.
      parameters:
        - $ref: '#/components/parameters/Parameters.heightQuery'
        - $ref: '#/components/parameters/Parameters.fromHeightQuery'
        - $ref: '#/components/parameters/Parameters.toHeightQuery'
        - $ref: '#/components/parameters/Parameters.receiptTypeQuery'
        - $ref: '#/components/parameters/Parameters.recipientAddressQuery'
        - $ref: '#/components/parameters/Parameters.senderAddressQuery'
        - $ref: '#/components/parameters/Parameters.targetAddressQuery'
        - $ref: '#/components/parameters/Parameters.artifactIdQuery'
        - $ref: '#/components/parameters/Parameters.pageSizeQuery'
        - $ref: '#/components/parameters/Parameters.pageNumberQuery'
        - $ref: '#/components/parameters/Parameters.offsetQuery'
        - $ref: '#/components/parameters/Parameters.orderQuery'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionStatementPage'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelError'
        '409':
          description: The request conflicts with the current state of the server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelError'
      tags:
        - Receipt routes
  /transactionStatus:
    post:
      operationId: TransactionStatus_getTransactionStatuses
      summary: Get transaction statuses
      description: Returns an array of transaction statuses for a given array of transaction hashes.
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TransactionStatusDTO'
        '400':
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelError'
        '409':
          description: The request conflicts with the current state of the server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelError'
      tags:
        - Transaction status routes
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/transactionHashes'
  /transactionStatus/{hash}:
    get:
      operationId: TransactionStatus_getTransactionStatus
      summary: Get transaction status
      description: Returns the transaction status for a given hash.
      parameters:
        - $ref: '#/components/parameters/Parameters.transactionHashPath'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionStatusDTO'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelError'
        '409':
          description: The request conflicts with the current state of the server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelError'
      tags:
        - Transaction status routes
  /transactions:
    put:
      operationId: Transaction_announceTransaction
      summary: Announce a new transaction
      description: |-
        Announces a transaction to the network.
        The [catbuffer library](https://github.com/nemtech/catbuffer) defines the protocol to serialize and deserialize Symbol entities.
        Catbuffers are integrated into [Symbol SDKs](https://nemtech.github.io/sdk.html).
        It's recommended to use SDKs instead of calling the API endpoint directly to announce transactions.
      parameters: []
      responses:
        '202':
          description: The request has been accepted for processing, but processing has not yet completed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnnounceTransactionInfoDTO'
        '400':
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelError'
        '409':
          description: The request conflicts with the current state of the server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelError'
      tags:
        - Transaction routes
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/transactionPayload'
  /transactions/confirmed:
    get:
      operationId: Transaction_searchConfirmedTransactions
      summary: Search confirmed transactions
      description: |-
        Returns an array of confirmed transactions.
        If a transaction was announced with an alias rather than an address,
        the address that will be considered when querying is the one that
        was resolved from the alias at confirmation time.
      parameters:
        - $ref: '#/components/parameters/Parameters.addressQuery'
        - $ref: '#/components/parameters/Parameters.recipientAddressQuery'
        - $ref: '#/components/parameters/Parameters.signerPublicKeyQuery'
        - $ref: '#/components/parameters/Parameters.heightQuery'
        - $ref: '#/components/parameters/Parameters.fromHeightQuery'
        - $ref: '#/components/parameters/Parameters.toHeightQuery'
        - $ref: '#/components/parameters/Parameters.fromTransferAmountQuery'
        - $ref: '#/components/parameters/Parameters.toTransferAmountQuery'
        - $ref: '#/components/parameters/Parameters.transactionTypeQuery'
        - $ref: '#/components/parameters/Parameters.embedded'
        - $ref: '#/components/parameters/Parameters.transferMosaicIdQuery'
        - $ref: '#/components/parameters/Parameters.pageSizeQuery'
        - $ref: '#/components/parameters/Parameters.pageNumberQuery'
        - $ref: '#/components/parameters/Parameters.offsetQuery'
        - $ref: '#/components/parameters/Parameters.orderQuery'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionPage'
        '409':
          description: The request conflicts with the current state of the server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelError'
      tags:
        - Transaction routes
    post:
      operationId: Transaction_getConfirmedTransactions
      summary: Get confirmed trasactions information
      description: Returns confirmed transactions information for a given array of transactionIds.
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TransactionInfoDTO'
        '400':
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelError'
        '409':
          description: The request conflicts with the current state of the server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelError'
      tags:
        - Transaction routes
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/transactionIds'
  /transactions/confirmed/{transactionId}:
    get:
      operationId: Transaction_getConfirmedTransaction
      summary: Get confirmed transaction information
      description: Returns confirmed transaction information given a transactionId or hash.
      parameters:
        - $ref: '#/components/parameters/Parameters.transactionIdPath'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionInfoDTO'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelError'
        '409':
          description: The request conflicts with the current state of the server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelError'
      tags:
        - Transaction routes
  /transactions/cosignature:
    put:
      operationId: Transaction_announceCosignatureTransaction
      summary: Announce a cosignature transaction
      description: Announces a cosignature transaction to the network.
      parameters: []
      responses:
        '202':
          description: The request has been accepted for processing, but processing has not yet completed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnnounceTransactionInfoDTO'
        '400':
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelError'
        '409':
          description: The request conflicts with the current state of the server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelError'
      tags:
        - Transaction routes
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/cosignature'
  /transactions/partial:
    get:
      operationId: Transaction_searchPartialTransactions
      summary: Search partial transactions
      description: Returns an array of partial transactions.
      parameters:
        - $ref: '#/components/parameters/Parameters.addressQuery'
        - $ref: '#/components/parameters/Parameters.recipientAddressQuery'
        - $ref: '#/components/parameters/Parameters.signerPublicKeyQuery'
        - $ref: '#/components/parameters/Parameters.heightQuery'
        - $ref: '#/components/parameters/Parameters.fromHeightQuery'
        - $ref: '#/components/parameters/Parameters.toHeightQuery'
        - $ref: '#/components/parameters/Parameters.fromTransferAmountQuery'
        - $ref: '#/components/parameters/Parameters.toTransferAmountQuery'
        - $ref: '#/components/parameters/Parameters.transactionTypeQuery'
        - $ref: '#/components/parameters/Parameters.embedded'
        - $ref: '#/components/parameters/Parameters.transferMosaicIdQuery'
        - $ref: '#/components/parameters/Parameters.pageSizeQuery'
        - $ref: '#/components/parameters/Parameters.pageNumberQuery'
        - $ref: '#/components/parameters/Parameters.offsetQuery'
        - $ref: '#/components/parameters/Parameters.orderQuery'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionPage'
        '409':
          description: The request conflicts with the current state of the server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelError'
      tags:
        - Transaction routes
    post:
      operationId: Transaction_getPartialTransactions
      summary: Get partial trasactions information
      description: Returns partial transactions information for a given array of transactionIds.
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TransactionInfoDTO'
        '400':
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelError'
        '409':
          description: The request conflicts with the current state of the server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelError'
      tags:
        - Transaction routes
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/transactionIds'
    put:
      operationId: Transaction_announcePartialTransaction
      summary: Announce an aggregate bonded transaction
      description: Announces an aggregate bonded transaction to the network.
      parameters: []
      responses:
        '202':
          description: The request has been accepted for processing, but processing has not yet completed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnnounceTransactionInfoDTO'
        '400':
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelError'
        '409':
          description: The request conflicts with the current state of the server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelError'
      tags:
        - Transaction routes
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/transactionPayload'
  /transactions/partial/{transactionId}:
    get:
      operationId: Transaction_getPartialTransaction
      summary: Get partial transaction information
      description: Returns partial transaction information given a transactionId or hash.
      parameters:
        - $ref: '#/components/parameters/Parameters.transactionIdPath'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionInfoDTO'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelError'
        '409':
          description: The request conflicts with the current state of the server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelError'
      tags:
        - Transaction routes
  /transactions/unconfirmed:
    get:
      operationId: Transaction_searchUnconfirmedTransactions
      summary: Search unconfirmed transactions
      description: Returns an array of unconfirmed transactions.
      parameters:
        - $ref: '#/components/parameters/Parameters.addressQuery'
        - $ref: '#/components/parameters/Parameters.recipientAddressQuery'
        - $ref: '#/components/parameters/Parameters.signerPublicKeyQuery'
        - $ref: '#/components/parameters/Parameters.heightQuery'
        - $ref: '#/components/parameters/Parameters.fromHeightQuery'
        - $ref: '#/components/parameters/Parameters.toHeightQuery'
        - $ref: '#/components/parameters/Parameters.fromTransferAmountQuery'
        - $ref: '#/components/parameters/Parameters.toTransferAmountQuery'
        - $ref: '#/components/parameters/Parameters.transactionTypeQuery'
        - $ref: '#/components/parameters/Parameters.embedded'
        - $ref: '#/components/parameters/Parameters.transferMosaicIdQuery'
        - $ref: '#/components/parameters/Parameters.pageSizeQuery'
        - $ref: '#/components/parameters/Parameters.pageNumberQuery'
        - $ref: '#/components/parameters/Parameters.offsetQuery'
        - $ref: '#/components/parameters/Parameters.orderQuery'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionPage'
        '409':
          description: The request conflicts with the current state of the server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelError'
      tags:
        - Transaction routes
    post:
      operationId: Transaction_getUnconfirmedTransactions
      summary: Get unconfirmed trasactions information
      description: Returns unconfirmed transactions information for a given array of transactionIds.
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TransactionInfoDTO'
        '400':
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelError'
        '409':
          description: The request conflicts with the current state of the server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelError'
      tags:
        - Transaction routes
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/transactionIds'
  /transactions/unconfirmed/{transactionId}:
    get:
      operationId: Transaction_getUnconfirmedTransaction
      summary: Get unconfirmed transaction information
      description: Returns unconfirmed transaction information given a transactionId or hash.
      parameters:
        - $ref: '#/components/parameters/Parameters.transactionIdPath'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionInfoDTO'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelError'
        '409':
          description: The request conflicts with the current state of the server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelError'
      tags:
        - Transaction routes
components:
  parameters:
    Parameters.accountIdPath:
      name: accountId
      in: path
      required: true
      description: Account public key or address encoded using a 32-character set.
      schema:
        type: string
    Parameters.address:
      name: address
      in: path
      required: true
      description: Account address.
      schema:
        $ref: '#/components/schemas/Address'
    Parameters.addressQuery:
      name: address
      in: query
      required: false
      description: |-
        Filter by address involved in the transaction.
        An account's address is considered to be involved in the transaction when
        the account is the sender, recipient, or it is required to cosign the transaction.
        This filter cannot be combined with ``recipientAddress`` and ``signerPublicKey`` query params.
      schema:
        $ref: '#/components/schemas/Address'
    Parameters.aliasTypeQuery:
      name: aliasType
      in: query
      required: false
      description: Filter by alias type.
      schema:
        $ref: '#/components/schemas/AliasTypeEnum'
    Parameters.artifactIdQuery:
      name: artifactId
      in: query
      required: false
      description: Mosaic or namespace identifier
      schema:
        type: string
    Parameters.beneficiaryAddressQuery:
      name: beneficiaryAddress
      in: query
      required: false
      description: Filter by beneficiary address.
      schema:
        $ref: '#/components/schemas/Address'
    Parameters.compositeHashPath:
      name: compositeHash
      in: path
      required: true
      description: Filter by composite hash.
      schema:
        $ref: '#/components/schemas/Hash256'
    Parameters.embedded:
      name: embedded
      in: query
      required: false
      description: |-
        When true, the endpoint also returns all the embedded aggregate transactions.
        Otherwise, only top-level transactions used to calculate the block transactionsHash are returned.
        **Note:** This field does not work when combined with the ``address`` parameter. This is,
        embedded transactions containing the address specified through the ``address`` parameter
        will not be returned even when used with ``embedded=true``. There is no problem when using
        other parameters like ``recipientAddress`` instead.
      schema:
        type: boolean
    Parameters.entryType:
      name: entryType
      in: query
      required: false
      description: Filter by entry type.
      schema:
        $ref: '#/components/schemas/MosaicRestrictionEntryTypeEnum'
    Parameters.fromHeightQuery:
      name: fromHeight
      in: query
      required: false
      description: Only blocks with height greater or equal than this one are returned.
      schema:
        $ref: '#/components/schemas/Height'
    Parameters.fromTransferAmountQuery:
      name: fromTransferAmount
      in: query
      required: false
      description: |-
        Requires providing the `transferMosaicId` filter.
        Only transfer transactions with a transfer amount of the provided mosaic id, greater or equal than this amount are returned.
      schema:
        $ref: '#/components/schemas/Amount'
    Parameters.hashPath:
      name: hash
      in: path
      required: true
      description: Filter by hash.
      schema:
        $ref: '#/components/schemas/Hash256'
    Parameters.heightPath:
      name: height
      in: path
      required: true
      description: Block height.
      schema:
        $ref: '#/components/schemas/Height'
    Parameters.heightQuery:
      name: height
      in: query
      required: false
      description: Filter by block height.
      schema:
        $ref: '#/components/schemas/Height'
    Parameters.level0Query:
      name: level0
      in: query
      required: false
      description: Filter by root namespace.
      schema:
        $ref: '#/components/schemas/NamespaceId'
    Parameters.metadataType:
      name: metadataType
      in: query
      required: false
      description: Filter by metadata type.
      schema:
        $ref: '#/components/schemas/MetadataTypeEnum'
    Parameters.mosaicIdPath:
      name: mosaicId
      in: path
      required: true
      description: Mosaic identifier.
      schema:
        $ref: '#/components/schemas/MosaicId'
    Parameters.mosaicIdQuery:
      name: mosaicId
      in: query
      required: false
      description: Filter by mosaic identifier.
      schema:
        $ref: '#/components/schemas/MosaicId'
    Parameters.namespaceIdPath:
      name: namespaceId
      in: path
      required: true
      description: Namespace identifier.
      schema:
        $ref: '#/components/schemas/NamespaceId'
    Parameters.offsetQuery:
      name: offset
      in: query
      required: false
      description: |-
        Entry id at which to start pagination.
        If the ordering parameter is set to -id, the elements returned precede the identifier.
        Otherwise, newer elements with respect to the id are returned.
      schema:
        type: string
    Parameters.orderByAccountQuery:
      name: orderBy
      in: query
      required: false
      description: |-
        Sort responses by the property set.
        If ``balance`` option is selected, the request must define the ``mosaicId`` filter.
      schema:
        $ref: '#/components/schemas/AccountOrderByEnum'
    Parameters.orderByBlockQuery:
      name: orderBy
      in: query
      required: false
      description: Sort responses by the property set.
      schema:
        $ref: '#/components/schemas/BlockOrderByEnum'
    Parameters.orderQuery:
      name: order
      in: query
      required: false
      description: |-
        Sort responses in ascending or descending order based on the collection property set on the param ``orderBy``.
        If the request does not specify ``orderBy``, REST returns the collection ordered by id.
      schema:
        $ref: '#/components/schemas/Order'
    Parameters.ownerAddressQuery:
      name: ownerAddress
      in: query
      required: false
      description: Filter by owner address.
      schema:
        $ref: '#/components/schemas/Address'
    Parameters.pageNumberQuery:
      name: pageNumber
      in: query
      required: false
      description: Filter by page number.
      schema:
        type: integer
        minimum: 1
        default: 1
    Parameters.pageSizeQuery:
      name: pageSize
      in: query
      required: false
      description: Select the number of entries to return.
      schema:
        type: integer
        minimum: 10
        maximum: 100
        default: 10
    Parameters.receiptHashPath:
      name: hash
      in: path
      required: true
      description: Receipt hash.
      schema:
        $ref: '#/components/schemas/Hash256'
    Parameters.receiptTypeQuery:
      name: receiptType
      in: query
      required: false
      description: |-
        Filter by receipt type.
        To filter by multiple receipt types, add more filter query params like: ``receiptType=8515&receiptType=20803``.
      schema:
        type: array
        items:
          $ref: '#/components/schemas/ReceiptTypeEnum'
    Parameters.recipientAddressQuery:
      name: recipientAddress
      in: query
      required: false
      description: Filter by address of the account receiving the transaction.
      schema:
        $ref: '#/components/schemas/Address'
    Parameters.registrationTypeQuery:
      name: registrationType
      in: query
      required: false
      description: Filter by registration type.
      schema:
        $ref: '#/components/schemas/NamespaceRegistrationTypeEnum'
    Parameters.scopedMetadataKeyQuery:
      name: scopedMetadataKey
      in: query
      required: false
      description: Filter by metadata key.
      schema:
        $ref: '#/components/schemas/MetadataKey'
    Parameters.secretQuery:
      name: secret
      in: query
      required: false
      description: Filter by secret.
      schema:
        $ref: '#/components/schemas/Secret'
    Parameters.senderAddressQuery:
      name: senderAddress
      in: query
      required: false
      description: Filter by address sending mosaics.
      schema:
        $ref: '#/components/schemas/Address'
    Parameters.signerPublicKeyQuery:
      name: signerPublicKey
      in: query
      required: false
      description: Filter by public key of the account signing the entity.
      schema:
        $ref: '#/components/schemas/PublicKey'
    Parameters.sourceAddressQuery:
      name: sourceAddress
      in: query
      required: false
      description: Filter by address sending the metadata entry.
      schema:
        $ref: '#/components/schemas/Address'
    Parameters.targetAddressQuery:
      name: targetAddress
      in: query
      required: false
      description: Filter by target address.
      schema:
        $ref: '#/components/schemas/Address'
    Parameters.targetIdQuery:
      name: targetId
      in: query
      required: false
      description: Filter by namespace or mosaic id.
      schema:
        type: string
        format: hex
    Parameters.toHeightQuery:
      name: toHeight
      in: query
      required: false
      description: Only blocks with height smaller or equal than this one are returned.
      schema:
        $ref: '#/components/schemas/Height'
    Parameters.toTransferAmountQuery:
      name: toTransferAmount
      in: query
      required: false
      description: |-
        Requires providing the `transferMosaicId` filter.
        Only transfer transactions with a transfer amount of the provided mosaic id, lesser or equal than this amount are returned.
      schema:
        $ref: '#/components/schemas/Amount'
    Parameters.transactionHashPath:
      name: hash
      in: path
      required: true
      description: Transaction hash.
      schema:
        $ref: '#/components/schemas/Hash256'
    Parameters.transactionIdPath:
      name: transactionId
      in: path
      required: true
      description: Transaction id or hash.
      schema:
        type: string
    Parameters.transactionTypeQuery:
      name: type
      in: query
      required: false
      description: |-
        Filter by transaction type.
        To filter by multiple transaction types, add more filter query params like: ``type=16974&type=16718``.
      schema:
        type: array
        items:
          $ref: '#/components/schemas/TransactionTypeEnum'
    Parameters.transferMosaicIdQuery:
      name: transferMosaicId
      in: query
      required: false
      description: Filters transactions involving a specific ``mosaicId``.
      schema:
        $ref: '#/components/schemas/MosaicId'
  schemas:
    AccountAddressRestrictionTransactionDTO:
      type: object
      required:
        - size
        - signature
        - signerPublicKey
        - version
        - network
        - type
        - maxFee
        - deadline
        - restrictionFlags
        - restrictionAdditions
        - restrictionDeletions
      properties:
        size:
          allOf:
            - $ref: '#/components/schemas/UInt32'
          description: Entity size in bytes.
        signature:
          $ref: '#/components/schemas/Signature'
        signerPublicKey:
          $ref: '#/components/schemas/PublicKey'
        version:
          type: integer
          description: Entity version.
          example: 1
        network:
          $ref: '#/components/schemas/NetworkTypeEnum'
        type:
          type: integer
          example: 32835
        maxFee:
          $ref: '#/components/schemas/Amount'
        deadline:
          $ref: '#/components/schemas/BlockDuration'
        restrictionFlags:
          $ref: '#/components/schemas/AccountRestrictionFlagsEnum'
        restrictionAdditions:
          type: array
          items:
            $ref: '#/components/schemas/UnresolvedAddress'
          description: Account restriction additions.
        restrictionDeletions:
          type: array
          items:
            $ref: '#/components/schemas/UnresolvedAddress'
          description: Account restriction deletions.
      description: Transaction to prevent incoming and outgoing transactions for a given a set of addresses.
    AccountDTO:
      type: object
      required:
        - version
        - address
        - addressHeight
        - publicKey
        - publicKeyHeight
        - accountType
        - supplementalPublicKeys
        - activityBuckets
        - mosaics
        - importance
        - importanceHeight
      properties:
        version:
          $ref: '#/components/schemas/StateVersion'
        address:
          $ref: '#/components/schemas/Address'
        addressHeight:
          $ref: '#/components/schemas/Height'
        publicKey:
          $ref: '#/components/schemas/PublicKey'
        publicKeyHeight:
          $ref: '#/components/schemas/Height'
        accountType:
          $ref: '#/components/schemas/AccountTypeEnum'
        supplementalPublicKeys:
          $ref: '#/components/schemas/SupplementalPublicKeysDTO'
        activityBuckets:
          type: array
          items:
            $ref: '#/components/schemas/ActivityBucketDTO'
        mosaics:
          type: array
          items:
            $ref: '#/components/schemas/Mosaic'
          description: Mosaic units owned.
        importance:
          $ref: '#/components/schemas/Importance'
        importanceHeight:
          $ref: '#/components/schemas/Height'
    AccountInfoDTO:
      type: object
      required:
        - id
        - account
      properties:
        id:
          allOf:
            - $ref: '#/components/schemas/ID'
          example: 65204AB4242726662686A453
        account:
          $ref: '#/components/schemas/AccountDTO'
    AccountKeyLinkNetworkPropertiesDTO:
      type: object
      properties:
        dummy:
          type: string
          description: to trigger plugin load
          example: 'true'
    AccountKeyLinkTransactionDTO:
      type: object
      required:
        - size
        - signature
        - signerPublicKey
        - version
        - network
        - type
        - maxFee
        - deadline
        - linkedPublicKey
        - linkAction
      properties:
        size:
          allOf:
            - $ref: '#/components/schemas/UInt32'
          description: Entity size in bytes.
        signature:
          $ref: '#/components/schemas/Signature'
        signerPublicKey:
          $ref: '#/components/schemas/PublicKey'
        version:
          type: integer
          description: Entity version.
          example: 1
        network:
          $ref: '#/components/schemas/NetworkTypeEnum'
        type:
          type: integer
          example: 32835
        maxFee:
          $ref: '#/components/schemas/Amount'
        deadline:
          $ref: '#/components/schemas/BlockDuration'
        linkedPublicKey:
          $ref: '#/components/schemas/PublicKey'
        linkAction:
          $ref: '#/components/schemas/LinkActionEnum'
      description: |-
        Transaction to delegate the account importance score to a proxy account.
        Required for all accounts willing to activate delegated harvesting.
    AccountLinkPublicKeyDTO:
      type: object
      required:
        - publicKey
      properties:
        publicKey:
          type: string
          example: AC1A6E1D8DE5B17D2C6B1293F1E3BE85A6493C8C3971E7A09471384B966E442D
    AccountLinkVotingKeyDTO:
      type: object
      required:
        - publicKey
        - startEpoch
        - endEpoch
      properties:
        publicKey:
          type: string
          example: AC1A6E1D8DE5B17D2C6B1293F1E3BE85A6493C8C3971E7A09471384B966E442D
        startEpoch:
          $ref: '#/components/schemas/FinalizationEpoch'
        endEpoch:
          $ref: '#/components/schemas/FinalizationEpoch'
    AccountLinkVotingKeysDTO:
      type: object
      required:
        - publicKeys
      properties:
        publicKeys:
          type: array
          items:
            $ref: '#/components/schemas/AccountLinkVotingKeyDTO'
    AccountMetadataTransactionDTO:
      type: object
      required:
        - size
        - signature
        - signerPublicKey
        - version
        - network
        - type
        - maxFee
        - deadline
        - targetAddress
        - scopedMetadataKey
        - valueSizeDelta
        - valueSize
        - value
      properties:
        size:
          allOf:
            - $ref: '#/components/schemas/UInt32'
          description: Entity size in bytes.
        signature:
          $ref: '#/components/schemas/Signature'
        signerPublicKey:
          $ref: '#/components/schemas/PublicKey'
        version:
          type: integer
          description: Entity version.
          example: 1
        network:
          $ref: '#/components/schemas/NetworkTypeEnum'
        type:
          type: integer
          example: 32835
        maxFee:
          $ref: '#/components/schemas/Amount'
        deadline:
          $ref: '#/components/schemas/BlockDuration'
        targetAddress:
          $ref: '#/components/schemas/UnresolvedAddress'
        scopedMetadataKey:
          $ref: '#/components/schemas/MetadataKey'
        valueSizeDelta:
          type: integer
          description: Change in value size in bytes.
        valueSize:
          allOf:
            - $ref: '#/components/schemas/UInt32'
          description: Value size in bytes.
        value:
          $ref: '#/components/schemas/MetadataValue'
      description: Transaction to create or modify a multisig account.
    AccountMosaicRestrictionTransactionDTO:
      type: object
      required:
        - size
        - signature
        - signerPublicKey
        - version
        - network
        - type
        - maxFee
        - deadline
        - restrictionFlags
        - restrictionAdditions
        - restrictionDeletions
      properties:
        size:
          allOf:
            - $ref: '#/components/schemas/UInt32'
          description: Entity size in bytes.
        signature:
          $ref: '#/components/schemas/Signature'
        signerPublicKey:
          $ref: '#/components/schemas/PublicKey'
        version:
          type: integer
          description: Entity version.
          example: 1
        network:
          $ref: '#/components/schemas/NetworkTypeEnum'
        type:
          type: integer
          example: 32835
        maxFee:
          $ref: '#/components/schemas/Amount'
        deadline:
          $ref: '#/components/schemas/BlockDuration'
        restrictionFlags:
          $ref: '#/components/schemas/AccountRestrictionFlagsEnum'
        restrictionAdditions:
          type: array
          items:
            $ref: '#/components/schemas/UnresolvedMosaicId'
          description: Account restriction additions.
        restrictionDeletions:
          type: array
          items:
            $ref: '#/components/schemas/UnresolvedMosaicId'
          description: Account restriction deletions.
      description: Transaction to prevent incoming transactions containing a given set of mosaics.
    AccountNamesDTO:
      type: object
      required:
        - address
        - names
      properties:
        address:
          $ref: '#/components/schemas/Address'
        names:
          type: array
          items:
            type: string
          description: Account linked namespace names.
    AccountOperationRestrictionTransactionDTO:
      type: object
      required:
        - size
        - signature
        - signerPublicKey
        - version
        - network
        - type
        - maxFee
        - deadline
        - restrictionFlags
        - restrictionAdditions
        - restrictionDeletions
      properties:
        size:
          allOf:
            - $ref: '#/components/schemas/UInt32'
          description: Entity size in bytes.
        signature:
          $ref: '#/components/schemas/Signature'
        signerPublicKey:
          $ref: '#/components/schemas/PublicKey'
        version:
          type: integer
          description: Entity version.
          example: 1
        network:
          $ref: '#/components/schemas/NetworkTypeEnum'
        type:
          type: integer
          example: 32835
        maxFee:
          $ref: '#/components/schemas/Amount'
        deadline:
          $ref: '#/components/schemas/BlockDuration'
        restrictionFlags:
          $ref: '#/components/schemas/AccountRestrictionFlagsEnum'
        restrictionAdditions:
          type: array
          items:
            $ref: '#/components/schemas/TransactionTypeEnum'
          description: Account restriction additions.
        restrictionDeletions:
          type: array
          items:
            $ref: '#/components/schemas/TransactionTypeEnum'
          description: Account restriction deletions.
      description: Transaction to prevent outgoing transactions by transaction type.
    AccountOrderByEnum:
      type: string
      enum:
        - id
        - balance
    AccountPage:
      type: object
      required:
        - data
        - pagination
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/AccountInfoDTO'
        pagination:
          $ref: '#/components/schemas/Pagination'
    AccountRestrictionDTO:
      type: object
      required:
        - restrictionFlags
        - values
      properties:
        restrictionFlags:
          $ref: '#/components/schemas/AccountRestrictionFlagsEnum'
        values:
          type: array
          items:
            anyOf:
              - $ref: '#/components/schemas/UnresolvedAddress'
              - $ref: '#/components/schemas/UnresolvedMosaicId'
              - $ref: '#/components/schemas/TransactionTypeEnum'
          description: Address, mosaic id, or transaction type to restrict.
    AccountRestrictionFlagsEnum:
      type: number
      enum:
        - 1
        - 2
        - 16385
        - 16388
        - 32769
        - 32770
        - 49153
        - 49156
      description: |-
        Type of account restriction:
        * 0x0001 (1 decimal) - Allow only incoming transactions from a given address.
        * 0x0002 (2 decimal) - Allow only incoming transactions containing a given mosaic identifier.
        * 0x4001 (16385 decimal) - Allow only outgoing transactions to a given address.
        * 0x4004 (16388 decimal) - Allow only outgoing transactions with a given transaction type.
        * 0x8001 (32769 decimal) - Block incoming transactions from a given address.
        * 0x8002 (32770 decimal) - Block incoming transactions containing a given mosaic identifier.
        * 0xC001 (49153 decimal) - Block outgoing transactions to a given address.
        * 0xC004 (49156 decimal) - Block outgoing transactions with a given transaction type.
    AccountRestrictionNetworkPropertiesDTO:
      type: object
      properties:
        maxAccountRestrictionValues:
          type: string
          description: Maximum number of account restriction values.
    AccountRestrictionsDTO:
      type: object
      required:
        - version
        - address
        - restrictions
      properties:
        version:
          $ref: '#/components/schemas/StateVersion'
        address:
          $ref: '#/components/schemas/Address'
        restrictions:
          type: array
          items:
            $ref: '#/components/schemas/AccountRestrictionDTO'
    AccountRestrictionsInfoDTO:
      type: object
      required:
        - accountRestrictions
      properties:
        accountRestrictions:
          $ref: '#/components/schemas/AccountRestrictionsDTO'
    AccountRestrictionsPage:
      type: object
      required:
        - data
        - pagination
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/AccountRestrictionsInfoDTO'
        pagination:
          $ref: '#/components/schemas/Pagination'
    AccountTypeEnum:
      type: number
      enum:
        - 0
        - 1
        - 2
        - 3
      description: |-
        * 0 - Unlinked.
        * 1 - Balance-holding account that is linked to a remote harvester account.
        * 2 - Remote harvester account that is linked to a balance-holding account.
        * 3 - Remote harvester eligible account that is unlinked.
    AccountsNamesDTO:
      type: object
      required:
        - accountNames
      properties:
        accountNames:
          type: array
          items:
            $ref: '#/components/schemas/AccountNamesDTO'
          description: Array of account names.
    ActivityBucketDTO:
      type: object
      required:
        - startHeight
        - totalFeesPaid
        - beneficiaryCount
        - rawScore
      properties:
        startHeight:
          $ref: '#/components/schemas/Height'
        totalFeesPaid:
          allOf:
            - $ref: '#/components/schemas/Amount'
          description: Fees paid by the account for this bucket.
        beneficiaryCount:
          allOf:
            - $ref: '#/components/schemas/UInt32'
          description: Number of times the account has been a beneficiary for this bucket.
        rawScore:
          allOf:
            - $ref: '#/components/schemas/Importance'
          description: Importance score for this bucket. This is taken into account to calculate the latest account importance.
      description: |-
        Supplementary data stored for importance recalculation.
        At each importance recalculation, existing buckets are shifted, the working bucket is finalized and a new working bucket is created.
        Each bucket influences at most five importance recalculations.
    Address:
      type: string
      maxLength: 48
      description: Address encoded using a 32-character set.
      example: 9889432DE263BB8FE88444A4DA28D3609BD8BB8FAE18AE95
    AddressAliasTransactionDTO:
      type: object
      required:
        - size
        - signature
        - signerPublicKey
        - version
        - network
        - type
        - maxFee
        - deadline
        - namespaceId
        - address
        - aliasAction
      properties:
        size:
          allOf:
            - $ref: '#/components/schemas/UInt32'
          description: Entity size in bytes.
        signature:
          $ref: '#/components/schemas/Signature'
        signerPublicKey:
          $ref: '#/components/schemas/PublicKey'
        version:
          type: integer
          description: Entity version.
          example: 1
        network:
          $ref: '#/components/schemas/NetworkTypeEnum'
        type:
          type: integer
          example: 32835
        maxFee:
          $ref: '#/components/schemas/Amount'
        deadline:
          $ref: '#/components/schemas/BlockDuration'
        namespaceId:
          $ref: '#/components/schemas/NamespaceId'
        address:
          $ref: '#/components/schemas/Address'
        aliasAction:
          $ref: '#/components/schemas/AliasActionEnum'
      description: Transaction to link a namespace to an account.
    AggregateNetworkPropertiesDTO:
      type: object
      properties:
        maxTransactionsPerAggregate:
          type: string
          description: Maximum number of transactions per aggregate.
          example: '100'
        maxCosignaturesPerAggregate:
          type: string
          description: Maximum number of cosignatures per aggregate.
          example: '25'
        enableStrictCosignatureCheck:
          type: boolean
          description: Set to true if cosignatures must exactly match component signers. Set to false if cosignatures should be validated externally.
          example: true
        enableBondedAggregateSupport:
          type: boolean
          description: Set to true if bonded aggregates should be allowed. Set to false if bonded aggregates should be rejected.
          example: true
        maxBondedTransactionLifetime:
          type: string
          description: Maximum lifetime a bonded transaction can have before it expires.
          example: 48h
    AggregateTransactionDTO:
      type: object
      required:
        - size
        - signature
        - signerPublicKey
        - version
        - network
        - type
        - maxFee
        - deadline
        - transactionsHash
        - cosignatures
      properties:
        size:
          allOf:
            - $ref: '#/components/schemas/UInt32'
          description: Entity size in bytes.
        signature:
          $ref: '#/components/schemas/Signature'
        signerPublicKey:
          $ref: '#/components/schemas/PublicKey'
        version:
          type: integer
          description: Entity version.
          example: 1
        network:
          $ref: '#/components/schemas/NetworkTypeEnum'
        type:
          type: integer
          example: 32835
        maxFee:
          $ref: '#/components/schemas/Amount'
        deadline:
          $ref: '#/components/schemas/BlockDuration'
        transactionsHash:
          $ref: '#/components/schemas/Hash256'
        cosignatures:
          type: array
          items:
            $ref: '#/components/schemas/CosignatureDTO'
          description: Array of transaction cosignatures.
      description: Transaction to combine multiple transactions together.
    AggregateTransactionExtendedDTO:
      type: object
      required:
        - size
        - signature
        - signerPublicKey
        - version
        - network
        - type
        - maxFee
        - deadline
        - transactionsHash
        - cosignatures
        - transactions
      properties:
        size:
          allOf:
            - $ref: '#/components/schemas/UInt32'
          description: Entity size in bytes.
        signature:
          $ref: '#/components/schemas/Signature'
        signerPublicKey:
          $ref: '#/components/schemas/PublicKey'
        version:
          type: integer
          description: Entity version.
          example: 1
        network:
          $ref: '#/components/schemas/NetworkTypeEnum'
        type:
          type: integer
          example: 32835
        maxFee:
          $ref: '#/components/schemas/Amount'
        deadline:
          $ref: '#/components/schemas/BlockDuration'
        transactionsHash:
          $ref: '#/components/schemas/Hash256'
        cosignatures:
          type: array
          items:
            $ref: '#/components/schemas/CosignatureDTO'
          description: Array of transaction cosignatures.
        transactions:
          type: array
          items:
            $ref: '#/components/schemas/EmbeddedTransactionInfoDTO'
          description: Array of transactions initiated by different accounts.
      description: Transaction to combine multiple transactions together.
    AliasActionEnum:
      type: number
      enum:
        - 0
        - 1
      description: |-
        Alias action:
        * 0 - Unlink alias.
        * 1 - Link alias.
    AliasDTO:
      type: object
      required:
        - type
      properties:
        type:
          $ref: '#/components/schemas/AliasTypeEnum'
        mosaicId:
          $ref: '#/components/schemas/MosaicId'
        address:
          $ref: '#/components/schemas/Address'
    AliasTypeEnum:
      type: number
      enum:
        - 0
        - 1
        - 2
      description: |-
        Type of alias:
        * 0 - No alias.
        * 1 - Mosaic id alias.
        * 2 - Addres alias.
    Amount:
      type: string
      description: Absolute amount. An amount of 123456789 (absolute) for a mosaic with divisibility 6 means 123.456789 (relative).
      example: '0'
    AnnounceTransactionInfoDTO:
      type: object
      required:
        - message
      properties:
        message:
          type: string
    BalanceChangeReceiptDTO:
      type: object
      required:
        - version
        - type
        - mosaicId
        - amount
        - targetAddress
      properties:
        version:
          type: integer
          description: Version of the receipt.
        type:
          $ref: '#/components/schemas/ReceiptTypeEnum'
        mosaicId:
          $ref: '#/components/schemas/MosaicId'
        amount:
          $ref: '#/components/schemas/Amount'
        targetAddress:
          $ref: '#/components/schemas/Address'
      description: Receipt stored when a state change modified an account balance.
    BalanceTransferReceiptDTO:
      type: object
      required:
        - version
        - type
        - mosaicId
        - amount
        - senderAddress
        - recipientAddress
      properties:
        version:
          type: integer
          description: Version of the receipt.
        type:
          $ref: '#/components/schemas/ReceiptTypeEnum'
        mosaicId:
          $ref: '#/components/schemas/MosaicId'
        amount:
          $ref: '#/components/schemas/Amount'
        senderAddress:
          $ref: '#/components/schemas/Address'
        recipientAddress:
          $ref: '#/components/schemas/Address'
      description: Receipt stored when a state change that triggered a mosaic transfer.
    BlockDTO:
      type: object
      required:
        - size
        - signature
        - signerPublicKey
        - version
        - network
        - type
        - height
        - timestamp
        - difficulty
        - proofGamma
        - proofVerificationHash
        - proofScalar
        - previousBlockHash
        - transactionsHash
        - receiptsHash
        - stateHash
        - beneficiaryAddress
        - feeMultiplier
      properties:
        size:
          allOf:
            - $ref: '#/components/schemas/UInt32'
          description: Entity size in bytes.
        signature:
          $ref: '#/components/schemas/Signature'
        signerPublicKey:
          $ref: '#/components/schemas/PublicKey'
        version:
          type: integer
          description: Entity version.
          example: 1
        network:
          $ref: '#/components/schemas/NetworkTypeEnum'
        type:
          type: integer
          example: 32835
        height:
          $ref: '#/components/schemas/Height'
        timestamp:
          $ref: '#/components/schemas/Timestamp'
        difficulty:
          $ref: '#/components/schemas/Difficulty'
        proofGamma:
          $ref: '#/components/schemas/ProofGamma'
        proofVerificationHash:
          $ref: '#/components/schemas/ProofVerificationHash'
        proofScalar:
          $ref: '#/components/schemas/ProofScalar'
        previousBlockHash:
          $ref: '#/components/schemas/Hash256'
        transactionsHash:
          $ref: '#/components/schemas/Hash256'
        receiptsHash:
          $ref: '#/components/schemas/Hash256'
        stateHash:
          $ref: '#/components/schemas/Hash256'
        beneficiaryAddress:
          $ref: '#/components/schemas/Address'
        feeMultiplier:
          $ref: '#/components/schemas/BlockFeeMultiplier'
    BlockDuration:
      type: string
      description: Duration expressed in number of blocks.
      example: '100'
    BlockFeeMultiplier:
      type: integer
      format: int64
      description: Fee multiplier applied to transactions contained in block.
      example: 0
    BlockInfoDTO:
      type: object
      required:
        - id
        - meta
        - block
      properties:
        id:
          $ref: '#/components/schemas/ID'
        meta:
          $ref: '#/components/schemas/BlockMetaDTO'
        block:
          anyOf:
            - $ref: '#/components/schemas/BlockDTO'
            - $ref: '#/components/schemas/ImportanceBlockDTO'
    BlockMetaDTO:
      type: object
      required:
        - hash
        - totalFee
        - generationHash
        - stateHashSubCacheMerkleRoots
        - totalTransactionsCount
        - transactionsCount
        - statementsCount
      properties:
        hash:
          $ref: '#/components/schemas/Hash256'
        totalFee:
          $ref: '#/components/schemas/Amount'
        generationHash:
          $ref: '#/components/schemas/Hash256'
        stateHashSubCacheMerkleRoots:
          type: array
          items:
            $ref: '#/components/schemas/Hash256'
        totalTransactionsCount:
          type: integer
          description: |-
            Total number of [transactions](https://docs.symbolplatform.com/concepts/transaction.html) confirmed in this block,
            including *embedded* transactions (i.e. transactions contained within aggregate transactions).
        transactionsCount:
          type: integer
          description: |-
            Number of [transactions](https://docs.symbolplatform.com/concepts/transaction.html) confirmed in this block.
            This does not count *embedded* transactions (i.e. transactions contained within aggregate transactions).
        statementsCount:
          type: integer
          description: |-
            Number of statements (of any kind) present in this block.
            Bear in mind that some of them (like
            [resolution statements](https://docs.symbolplatform.com/concepts/receipt.html#resolution-statement)) are
            triggered by transactions present in the block, but in general,
            [transaction statements](https://docs.symbolplatform.com/concepts/receipt.html#transaction-statement) are not.
    BlockOrderByEnum:
      type: string
      enum:
        - id
        - height
    BlockPage:
      type: object
      required:
        - data
        - pagination
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/BlockInfoDTO'
        pagination:
          $ref: '#/components/schemas/Pagination'
    BmTreeSignature:
      type: object
      required:
        - root
        - bottom
      properties:
        root:
          $ref: '#/components/schemas/ParentPublicKeySignaturePair'
        bottom:
          $ref: '#/components/schemas/ParentPublicKeySignaturePair'
    ChainInfoDTO:
      type: object
      required:
        - height
        - scoreHigh
        - scoreLow
        - latestFinalizedBlock
      properties:
        height:
          $ref: '#/components/schemas/Height'
        scoreHigh:
          $ref: '#/components/schemas/Score'
        scoreLow:
          $ref: '#/components/schemas/Score'
        latestFinalizedBlock:
          $ref: '#/components/schemas/FinalizedBlockDTO'
    ChainPropertiesDTO:
      type: object
      properties:
        enableVerifiableState:
          type: boolean
          description: Set to true if block chain should calculate state hashes so that state is fully verifiable at each block.
          example: true
        enableVerifiableReceipts:
          type: boolean
          description: Set to true if block chain should calculate receipts so that state changes are fully verifiable at each block.
          example: true
        currencyMosaicId:
          type: string
          description: Mosaic id used as primary chain currency.
          example: '0x243FE287A5239A55'
        harvestingMosaicId:
          type: string
          description: Mosaic id used to provide harvesting ability.
          example: '0x243FE287A5239A55'
        blockGenerationTargetTime:
          type: string
          description: Targeted time between blocks.
          example: 30s
        blockTimeSmoothingFactor:
          type: string
          description: A higher value makes the network more biased.
          example: '500'
        blockFinalizationInterval:
          type: string
          description: Number of blocks between successive finalization attempts.
          example: '20'
        importanceGrouping:
          type: string
          description: Number of blocks that should be treated as a group for importance purposes.
          example: '39'
        importanceActivityPercentage:
          type: string
          description: Percentage of importance resulting from fee generation and beneficiary usage.
          example: '5'
        maxRollbackBlocks:
          type: string
          description: Maximum number of blocks that can be rolled back.
          example: '40'
        maxDifficultyBlocks:
          type: string
          description: Maximum number of blocks to use in a difficulty calculation.
          example: '60'
        defaultDynamicFeeMultiplier:
          type: string
          description: Default multiplier to use for dynamic fees.
          example: '100'
        maxTransactionLifetime:
          type: string
          description: Maximum lifetime a transaction can have before it expires.
          example: 24h
        maxBlockFutureTime:
          type: string
          description: Maximum future time of a block that can be accepted.
          example: 500ms
        initialCurrencyAtomicUnits:
          type: string
          description: Initial currency atomic units available in the network.
          example: 8'998'999'998'000'000
        maxMosaicAtomicUnits:
          type: string
          description: Maximum atomic units (total-supply * 10 ^ divisibility) of a mosaic allowed in the network.
          example: 9'000'000'000'000'000
        totalChainImportance:
          type: string
          description: Total whole importance units available in the network.
          example: 15'000'000
        minHarvesterBalance:
          type: string
          description: Minimum number of harvesting mosaic atomic units needed for an account to be eligible for harvesting.
          example: '500'
        maxHarvesterBalance:
          type: string
          description: Maximum number of harvesting mosaic atomic units needed for an account to be eligible for harvesting.
          example: 4'000'000'000
        minVoterBalance:
          type: string
          description: Minimum number of harvesting mosaic atomic units needed for an account to be eligible for voting.
          example: 50'000
        maxVotingKeysPerAccount:
          type: string
          description: Maximum number of voting keys that can be registered at once per account.
          example: '3'
        minVotingKeyLifetime:
          type: string
          description: Minimum number of finalization rounds for which voting key can be registered.
          example: '20'
        maxVotingKeyLifetime:
          type: string
          description: Maximum number of finalization rounds for which voting key can be registered.
          example: '260'
        harvestBeneficiaryPercentage:
          type: string
          description: Percentage of the harvested fee that is collected by the beneficiary account.
          example: '10'
        harvestNetworkPercentage:
          type: string
          description: Percentage of the harvested fee that is collected by the network.
          example: '5'
        harvestNetworkFeeSinkAddress:
          allOf:
            - $ref: '#/components/schemas/Address'
          description: Address of the harvest network fee sink account.
          example: TAMESPACEWH4MKFMBCVFERDPOOP4FK7MTDJEYP35
        blockPruneInterval:
          type: string
          description: Number of blocks between cache pruning.
          example: '100'
        maxTransactionsPerBlock:
          type: string
          description: Maximum number of transactions per block.
          example: '1000'
      description: Chain related configuration properties.
    CommunicationTimestampsDTO:
      type: object
      properties:
        sendTimestamp:
          $ref: '#/components/schemas/Timestamp'
        receiveTimestamp:
          $ref: '#/components/schemas/Timestamp'
    CosignatureDTO:
      type: object
      required:
        - signature
        - version
        - signerPublicKey
      properties:
        signature:
          $ref: '#/components/schemas/Signature'
        version:
          $ref: '#/components/schemas/CosignatureVersion'
        signerPublicKey:
          $ref: '#/components/schemas/PublicKey'
    CosignatureVersion:
      type: string
      description: Cosignature version.
      example: '0'
    DatabaseDTO:
      type: object
      required:
        - numIndexes
        - numObjects
        - dataSize
        - indexSize
        - storageSize
      properties:
        numIndexes:
          type: number
          enum:
            - 76
        numObjects:
          type: number
          enum:
            - 7328577
        dataSize:
          type: number
          enum:
            - 7129099034
        indexSize:
          type: number
          enum:
            - 550572032
        storageSize:
          type: number
          enum:
            - 3327238144
    DeploymentDTO:
      type: object
      required:
        - deploymentTool
        - deploymentToolVersion
        - lastUpdatedDate
      properties:
        deploymentTool:
          type: string
          description: 'The tool used to create, maintain and deploy the node. Examples: symbol-bootstrap, manual.'
          example: symbol-bootstrap
        deploymentToolVersion:
          type: string
          description: The version of the tool used to create, maintain and deploy the node.
          example: 1.1.11
        lastUpdatedDate:
          type: string
          description: When was the node last upgraded.
          example: '2025-03-11'
    Difficulty:
      type: string
      description: Determines how hard is to harvest a new block, based on previous blocks.
      example: '100000000000000'
    EmbeddedAccountAddressRestrictionTransactionDTO:
      type: object
      required:
        - signerPublicKey
        - version
        - network
        - type
        - restrictionFlags
        - restrictionAdditions
        - restrictionDeletions
      properties:
        signerPublicKey:
          $ref: '#/components/schemas/PublicKey'
        version:
          type: integer
          description: Entity version.
          example: 1
        network:
          $ref: '#/components/schemas/NetworkTypeEnum'
        type:
          type: integer
          example: 32835
        restrictionFlags:
          $ref: '#/components/schemas/AccountRestrictionFlagsEnum'
        restrictionAdditions:
          type: array
          items:
            $ref: '#/components/schemas/UnresolvedAddress'
          description: Account restriction additions.
        restrictionDeletions:
          type: array
          items:
            $ref: '#/components/schemas/UnresolvedAddress'
          description: Account restriction deletions.
    EmbeddedAccountKeyLinkTransactionDTO:
      type: object
      required:
        - signerPublicKey
        - version
        - network
        - type
        - linkedPublicKey
        - linkAction
      properties:
        signerPublicKey:
          $ref: '#/components/schemas/PublicKey'
        version:
          type: integer
          description: Entity version.
          example: 1
        network:
          $ref: '#/components/schemas/NetworkTypeEnum'
        type:
          type: integer
          example: 32835
        linkedPublicKey:
          $ref: '#/components/schemas/PublicKey'
        linkAction:
          $ref: '#/components/schemas/LinkActionEnum'
    EmbeddedAccountMetadataTransactionDTO:
      type: object
      required:
        - signerPublicKey
        - version
        - network
        - type
        - targetAddress
        - scopedMetadataKey
        - valueSizeDelta
        - valueSize
        - value
      properties:
        signerPublicKey:
          $ref: '#/components/schemas/PublicKey'
        version:
          type: integer
          description: Entity version.
          example: 1
        network:
          $ref: '#/components/schemas/NetworkTypeEnum'
        type:
          type: integer
          example: 32835
        targetAddress:
          $ref: '#/components/schemas/UnresolvedAddress'
        scopedMetadataKey:
          $ref: '#/components/schemas/MetadataKey'
        valueSizeDelta:
          type: integer
          description: Change in value size in bytes.
        valueSize:
          allOf:
            - $ref: '#/components/schemas/UInt32'
          description: Value size in bytes.
        value:
          $ref: '#/components/schemas/MetadataValue'
    EmbeddedAccountMosaicRestrictionTransactionDTO:
      type: object
      required:
        - signerPublicKey
        - version
        - network
        - type
        - restrictionFlags
        - restrictionAdditions
        - restrictionDeletions
      properties:
        signerPublicKey:
          $ref: '#/components/schemas/PublicKey'
        version:
          type: integer
          description: Entity version.
          example: 1
        network:
          $ref: '#/components/schemas/NetworkTypeEnum'
        type:
          type: integer
          example: 32835
        restrictionFlags:
          $ref: '#/components/schemas/AccountRestrictionFlagsEnum'
        restrictionAdditions:
          type: array
          items:
            $ref: '#/components/schemas/UnresolvedMosaicId'
          description: Account restriction additions.
        restrictionDeletions:
          type: array
          items:
            $ref: '#/components/schemas/UnresolvedMosaicId'
          description: Account restriction deletions.
    EmbeddedAccountOperationRestrictionTransactionDTO:
      type: object
      required:
        - signerPublicKey
        - version
        - network
        - type
        - restrictionFlags
        - restrictionAdditions
        - restrictionDeletions
      properties:
        signerPublicKey:
          $ref: '#/components/schemas/PublicKey'
        version:
          type: integer
          description: Entity version.
          example: 1
        network:
          $ref: '#/components/schemas/NetworkTypeEnum'
        type:
          type: integer
          example: 32835
        restrictionFlags:
          $ref: '#/components/schemas/AccountRestrictionFlagsEnum'
        restrictionAdditions:
          type: array
          items:
            $ref: '#/components/schemas/TransactionTypeEnum'
          description: Account restriction additions.
        restrictionDeletions:
          type: array
          items:
            $ref: '#/components/schemas/TransactionTypeEnum'
          description: Account restriction deletions.
    EmbeddedAddressAliasTransactionDTO:
      type: object
      required:
        - signerPublicKey
        - version
        - network
        - type
        - namespaceId
        - address
        - aliasAction
      properties:
        signerPublicKey:
          $ref: '#/components/schemas/PublicKey'
        version:
          type: integer
          description: Entity version.
          example: 1
        network:
          $ref: '#/components/schemas/NetworkTypeEnum'
        type:
          type: integer
          example: 32835
        namespaceId:
          $ref: '#/components/schemas/NamespaceId'
        address:
          $ref: '#/components/schemas/Address'
        aliasAction:
          $ref: '#/components/schemas/AliasActionEnum'
    EmbeddedHashLockTransactionDTO:
      type: object
      required:
        - signerPublicKey
        - version
        - network
        - type
        - mosaicId
        - amount
        - duration
        - hash
      properties:
        signerPublicKey:
          $ref: '#/components/schemas/PublicKey'
        version:
          type: integer
          description: Entity version.
          example: 1
        network:
          $ref: '#/components/schemas/NetworkTypeEnum'
        type:
          type: integer
          example: 32835
        mosaicId:
          $ref: '#/components/schemas/UnresolvedMosaicId'
        amount:
          $ref: '#/components/schemas/Amount'
        duration:
          $ref: '#/components/schemas/BlockDuration'
        hash:
          $ref: '#/components/schemas/Hash256'
    EmbeddedMosaicAddressRestrictionTransactionDTO:
      type: object
      required:
        - signerPublicKey
        - version
        - network
        - type
        - mosaicId
        - restrictionKey
        - previousRestrictionValue
        - newRestrictionValue
        - targetAddress
      properties:
        signerPublicKey:
          $ref: '#/components/schemas/PublicKey'
        version:
          type: integer
          description: Entity version.
          example: 1
        network:
          $ref: '#/components/schemas/NetworkTypeEnum'
        type:
          type: integer
          example: 32835
        mosaicId:
          $ref: '#/components/schemas/UnresolvedMosaicId'
        restrictionKey:
          $ref: '#/components/schemas/RestrictionKey'
        previousRestrictionValue:
          $ref: '#/components/schemas/RestrictionValue'
        newRestrictionValue:
          $ref: '#/components/schemas/RestrictionValue'
        targetAddress:
          $ref: '#/components/schemas/UnresolvedAddress'
    EmbeddedMosaicAliasTransactionDTO:
      type: object
      required:
        - signerPublicKey
        - version
        - network
        - type
        - namespaceId
        - mosaicId
        - aliasAction
      properties:
        signerPublicKey:
          $ref: '#/components/schemas/PublicKey'
        version:
          type: integer
          description: Entity version.
          example: 1
        network:
          $ref: '#/components/schemas/NetworkTypeEnum'
        type:
          type: integer
          example: 32835
        namespaceId:
          $ref: '#/components/schemas/NamespaceId'
        mosaicId:
          $ref: '#/components/schemas/MosaicId'
        aliasAction:
          $ref: '#/components/schemas/AliasActionEnum'
    EmbeddedMosaicDefinitionTransactionDTO:
      type: object
      required:
        - signerPublicKey
        - version
        - network
        - type
        - id
        - duration
        - nonce
        - flags
        - divisibility
      properties:
        signerPublicKey:
          $ref: '#/components/schemas/PublicKey'
        version:
          type: integer
          description: Entity version.
          example: 1
        network:
          $ref: '#/components/schemas/NetworkTypeEnum'
        type:
          type: integer
          example: 32835
        id:
          $ref: '#/components/schemas/MosaicId'
        duration:
          $ref: '#/components/schemas/BlockDuration'
        nonce:
          allOf:
            - $ref: '#/components/schemas/UInt32'
          description: Random nonce used to generate the mosaic id.
        flags:
          $ref: '#/components/schemas/MosaicFlagsEnum'
        divisibility:
          type: integer
          description: |-
            Determines up to what decimal place the mosaic can be divided.
            Divisibility of 3 means that a mosaic can be divided into smallest parts of 0.001 mosaics.
            The divisibility must be in the range of 0 and 6.
    EmbeddedMosaicGlobalRestrictionTransactionDTO:
      type: object
      required:
        - signerPublicKey
        - version
        - network
        - type
        - mosaicId
        - referenceMosaicId
        - restrictionKey
        - previousRestrictionValue
        - newRestrictionValue
        - previousRestrictionType
        - newRestrictionType
      properties:
        signerPublicKey:
          $ref: '#/components/schemas/PublicKey'
        version:
          type: integer
          description: Entity version.
          example: 1
        network:
          $ref: '#/components/schemas/NetworkTypeEnum'
        type:
          type: integer
          example: 32835
        mosaicId:
          $ref: '#/components/schemas/UnresolvedMosaicId'
        referenceMosaicId:
          $ref: '#/components/schemas/UnresolvedMosaicId'
        restrictionKey:
          $ref: '#/components/schemas/RestrictionKey'
        previousRestrictionValue:
          $ref: '#/components/schemas/RestrictionValue'
        newRestrictionValue:
          $ref: '#/components/schemas/RestrictionValue'
        previousRestrictionType:
          $ref: '#/components/schemas/MosaicRestrictionTypeEnum'
        newRestrictionType:
          $ref: '#/components/schemas/MosaicRestrictionTypeEnum'
    EmbeddedMosaicMetadataTransactionDTO:
      type: object
      required:
        - signerPublicKey
        - version
        - network
        - type
        - targetAddress
        - scopedMetadataKey
        - targetMosaicId
        - valueSizeDelta
        - valueSize
        - value
      properties:
        signerPublicKey:
          $ref: '#/components/schemas/PublicKey'
        version:
          type: integer
          description: Entity version.
          example: 1
        network:
          $ref: '#/components/schemas/NetworkTypeEnum'
        type:
          type: integer
          example: 32835
        targetAddress:
          $ref: '#/components/schemas/UnresolvedAddress'
        scopedMetadataKey:
          $ref: '#/components/schemas/MetadataKey'
        targetMosaicId:
          $ref: '#/components/schemas/UnresolvedMosaicId'
        valueSizeDelta:
          type: integer
          description: Change in value size in bytes.
        valueSize:
          allOf:
            - $ref: '#/components/schemas/UInt32'
          description: Value size in bytes.
        value:
          $ref: '#/components/schemas/MetadataValue'
    EmbeddedMosaicSupplyChangeTransactionDTO:
      type: object
      required:
        - signerPublicKey
        - version
        - network
        - type
        - mosaicId
        - delta
        - action
      properties:
        signerPublicKey:
          $ref: '#/components/schemas/PublicKey'
        version:
          type: integer
          description: Entity version.
          example: 1
        network:
          $ref: '#/components/schemas/NetworkTypeEnum'
        type:
          type: integer
          example: 32835
        mosaicId:
          $ref: '#/components/schemas/UnresolvedMosaicId'
        delta:
          $ref: '#/components/schemas/Amount'
        action:
          $ref: '#/components/schemas/MosaicSupplyChangeActionEnum'
    EmbeddedMosaicSupplyRevocationTransactionDTO:
      type: object
      required:
        - signerPublicKey
        - version
        - network
        - type
        - sourceAddress
        - mosaicId
        - amount
      properties:
        signerPublicKey:
          $ref: '#/components/schemas/PublicKey'
        version:
          type: integer
          description: Entity version.
          example: 1
        network:
          $ref: '#/components/schemas/NetworkTypeEnum'
        type:
          type: integer
          example: 32835
        sourceAddress:
          $ref: '#/components/schemas/UnresolvedAddress'
        mosaicId:
          $ref: '#/components/schemas/UnresolvedMosaicId'
        amount:
          $ref: '#/components/schemas/Amount'
    EmbeddedMultisigAccountModificationTransactionDTO:
      type: object
      required:
        - signerPublicKey
        - version
        - network
        - type
        - minRemovalDelta
        - minApprovalDelta
        - addressAdditions
        - addressDeletions
      properties:
        signerPublicKey:
          $ref: '#/components/schemas/PublicKey'
        version:
          type: integer
          description: Entity version.
          example: 1
        network:
          $ref: '#/components/schemas/NetworkTypeEnum'
        type:
          type: integer
          example: 32835
        minRemovalDelta:
          type: integer
          description: |-
            Number of signatures needed to remove a cosignatory.
            If we are modifying an existing multisig account, this indicates the relative change of the minimum cosignatories.
        minApprovalDelta:
          type: integer
          description: |-
            Number of signatures needed to approve a transaction.
            If we are modifying an existing multisig account, this indicates the relative change of the minimum cosignatories.
        addressAdditions:
          type: array
          items:
            $ref: '#/components/schemas/UnresolvedAddress'
          description: Array of cosignatory accounts to add.
        addressDeletions:
          type: array
          items:
            $ref: '#/components/schemas/UnresolvedAddress'
          description: Array of cosignatory accounts to delete.
    EmbeddedNamespaceMetadataTransactionDTO:
      type: object
      required:
        - signerPublicKey
        - version
        - network
        - type
        - targetAddress
        - scopedMetadataKey
        - valueSizeDelta
        - valueSize
        - value
      properties:
        signerPublicKey:
          $ref: '#/components/schemas/PublicKey'
        version:
          type: integer
          description: Entity version.
          example: 1
        network:
          $ref: '#/components/schemas/NetworkTypeEnum'
        type:
          type: integer
          example: 32835
        targetAddress:
          $ref: '#/components/schemas/UnresolvedAddress'
        scopedMetadataKey:
          $ref: '#/components/schemas/MetadataKey'
        targetNamespaceId:
          $ref: '#/components/schemas/NamespaceId'
        valueSizeDelta:
          type: integer
          description: Change in value size in bytes.
        valueSize:
          allOf:
            - $ref: '#/components/schemas/UInt32'
          description: Value size in bytes.
        value:
          $ref: '#/components/schemas/MetadataValue'
    EmbeddedNamespaceRegistrationTransactionDTO:
      type: object
      required:
        - signerPublicKey
        - version
        - network
        - type
        - id
        - registrationType
        - name
      properties:
        signerPublicKey:
          $ref: '#/components/schemas/PublicKey'
        version:
          type: integer
          description: Entity version.
          example: 1
        network:
          $ref: '#/components/schemas/NetworkTypeEnum'
        type:
          type: integer
          example: 32835
        duration:
          $ref: '#/components/schemas/BlockDuration'
        parentId:
          $ref: '#/components/schemas/NamespaceId'
        id:
          $ref: '#/components/schemas/NamespaceId'
        registrationType:
          $ref: '#/components/schemas/NamespaceRegistrationTypeEnum'
        name:
          type: string
          description: Namespace name.
    EmbeddedNodeKeyLinkTransactionDTO:
      type: object
      required:
        - signerPublicKey
        - version
        - network
        - type
        - linkedPublicKey
        - linkAction
      properties:
        signerPublicKey:
          $ref: '#/components/schemas/PublicKey'
        version:
          type: integer
          description: Entity version.
          example: 1
        network:
          $ref: '#/components/schemas/NetworkTypeEnum'
        type:
          type: integer
          example: 32835
        linkedPublicKey:
          $ref: '#/components/schemas/PublicKey'
        linkAction:
          $ref: '#/components/schemas/LinkActionEnum'
    EmbeddedSecretLockTransactionDTO:
      type: object
      required:
        - signerPublicKey
        - version
        - network
        - type
        - recipientAddress
        - secret
        - mosaicId
        - amount
        - duration
        - hashAlgorithm
      properties:
        signerPublicKey:
          $ref: '#/components/schemas/PublicKey'
        version:
          type: integer
          description: Entity version.
          example: 1
        network:
          $ref: '#/components/schemas/NetworkTypeEnum'
        type:
          type: integer
          example: 32835
        recipientAddress:
          $ref: '#/components/schemas/UnresolvedAddress'
        secret:
          $ref: '#/components/schemas/Hash256'
        mosaicId:
          $ref: '#/components/schemas/UnresolvedMosaicId'
        amount:
          $ref: '#/components/schemas/Amount'
        duration:
          $ref: '#/components/schemas/BlockDuration'
        hashAlgorithm:
          $ref: '#/components/schemas/LockHashAlgorithmEnum'
    EmbeddedSecretProofTransactionDTO:
      type: object
      required:
        - signerPublicKey
        - version
        - network
        - type
        - recipientAddress
        - secret
        - hashAlgorithm
        - proof
      properties:
        signerPublicKey:
          $ref: '#/components/schemas/PublicKey'
        version:
          type: integer
          description: Entity version.
          example: 1
        network:
          $ref: '#/components/schemas/NetworkTypeEnum'
        type:
          type: integer
          example: 32835
        recipientAddress:
          $ref: '#/components/schemas/UnresolvedAddress'
        secret:
          $ref: '#/components/schemas/Hash256'
        hashAlgorithm:
          $ref: '#/components/schemas/LockHashAlgorithmEnum'
        proof:
          type: string
          description: Original random set of bytes.
    EmbeddedTransactionInfoDTO:
      type: object
      required:
        - id
        - meta
        - transaction
      properties:
        id:
          $ref: '#/components/schemas/ID'
        meta:
          $ref: '#/components/schemas/EmbeddedTransactionMetaDTO'
        transaction:
          anyOf:
            - $ref: '#/components/schemas/EmbeddedAccountKeyLinkTransactionDTO'
            - $ref: '#/components/schemas/EmbeddedNodeKeyLinkTransactionDTO'
            - $ref: '#/components/schemas/EmbeddedVrfKeyLinkTransactionDTO'
            - $ref: '#/components/schemas/EmbeddedVotingKeyLinkTransactionDTO'
            - $ref: '#/components/schemas/EmbeddedHashLockTransactionDTO'
            - $ref: '#/components/schemas/EmbeddedSecretLockTransactionDTO'
            - $ref: '#/components/schemas/EmbeddedSecretProofTransactionDTO'
            - $ref: '#/components/schemas/EmbeddedAccountMetadataTransactionDTO'
            - $ref: '#/components/schemas/EmbeddedMosaicMetadataTransactionDTO'
            - $ref: '#/components/schemas/EmbeddedNamespaceMetadataTransactionDTO'
            - $ref: '#/components/schemas/EmbeddedMosaicDefinitionTransactionDTO'
            - $ref: '#/components/schemas/EmbeddedMosaicSupplyChangeTransactionDTO'
            - $ref: '#/components/schemas/EmbeddedMosaicSupplyRevocationTransactionDTO'
            - $ref: '#/components/schemas/EmbeddedNamespaceRegistrationTransactionDTO'
            - $ref: '#/components/schemas/EmbeddedAddressAliasTransactionDTO'
            - $ref: '#/components/schemas/EmbeddedMosaicAliasTransactionDTO'
            - $ref: '#/components/schemas/EmbeddedMultisigAccountModificationTransactionDTO'
            - $ref: '#/components/schemas/EmbeddedAccountAddressRestrictionTransactionDTO'
            - $ref: '#/components/schemas/EmbeddedAccountMosaicRestrictionTransactionDTO'
            - $ref: '#/components/schemas/EmbeddedAccountOperationRestrictionTransactionDTO'
            - $ref: '#/components/schemas/EmbeddedMosaicGlobalRestrictionTransactionDTO'
            - $ref: '#/components/schemas/EmbeddedMosaicAddressRestrictionTransactionDTO'
            - $ref: '#/components/schemas/EmbeddedTransferTransactionDTO'
    EmbeddedTransactionMetaDTO:
      type: object
      required:
        - height
        - aggregateHash
        - aggregateId
        - index
      properties:
        height:
          $ref: '#/components/schemas/Height'
        aggregateHash:
          $ref: '#/components/schemas/Hash256'
        aggregateId:
          type: string
          description: Identifier of the aggregate transaction.
        index:
          type: integer
          description: Transaction index within the aggregate.
        timestamp:
          $ref: '#/components/schemas/Timestamp'
        feeMultiplier:
          $ref: '#/components/schemas/BlockFeeMultiplier'
    EmbeddedTransferTransactionDTO:
      type: object
      required:
        - signerPublicKey
        - version
        - network
        - type
        - recipientAddress
        - mosaics
      properties:
        signerPublicKey:
          $ref: '#/components/schemas/PublicKey'
        version:
          type: integer
          description: Entity version.
          example: 1
        network:
          $ref: '#/components/schemas/NetworkTypeEnum'
        type:
          type: integer
          example: 32835
        recipientAddress:
          $ref: '#/components/schemas/UnresolvedAddress'
        mosaics:
          type: array
          items:
            $ref: '#/components/schemas/UnresolvedMosaic'
          description: Array of mosaics sent to the recipient.
        message:
          type: string
          description: Transfer transaction message
    EmbeddedVotingKeyLinkTransactionDTO:
      type: object
      required:
        - signerPublicKey
        - version
        - network
        - type
        - linkedPublicKey
        - startEpoch
        - endEpoch
        - linkAction
      properties:
        signerPublicKey:
          $ref: '#/components/schemas/PublicKey'
        version:
          type: integer
          description: Entity version.
          example: 1
        network:
          $ref: '#/components/schemas/NetworkTypeEnum'
        type:
          type: integer
          example: 32835
        linkedPublicKey:
          $ref: '#/components/schemas/VotingKey'
        startEpoch:
          $ref: '#/components/schemas/FinalizationEpoch'
        endEpoch:
          $ref: '#/components/schemas/FinalizationEpoch'
        linkAction:
          $ref: '#/components/schemas/LinkActionEnum'
    EmbeddedVrfKeyLinkTransactionDTO:
      type: object
      required:
        - signerPublicKey
        - version
        - network
        - type
        - linkedPublicKey
        - linkAction
      properties:
        signerPublicKey:
          $ref: '#/components/schemas/PublicKey'
        version:
          type: integer
          description: Entity version.
          example: 1
        network:
          $ref: '#/components/schemas/NetworkTypeEnum'
        type:
          type: integer
          example: 32835
        linkedPublicKey:
          $ref: '#/components/schemas/PublicKey'
        linkAction:
          $ref: '#/components/schemas/LinkActionEnum'
    FinalizationEpoch:
      type: integer
      format: int64
      description: Finalization Epoch
      example: 1
    FinalizationPoint:
      type: integer
      format: int64
      description: Finalization point
      example: 1
    FinalizationProofDTO:
      type: object
      required:
        - version
        - finalizationEpoch
        - finalizationPoint
        - height
        - hash
        - messageGroups
      properties:
        version:
          type: integer
        finalizationEpoch:
          $ref: '#/components/schemas/FinalizationEpoch'
        finalizationPoint:
          $ref: '#/components/schemas/FinalizationPoint'
        height:
          $ref: '#/components/schemas/Height'
        hash:
          $ref: '#/components/schemas/Hash256'
        messageGroups:
          type: array
          items:
            $ref: '#/components/schemas/MessageGroup'
    FinalizedBlockDTO:
      type: object
      required:
        - finalizationEpoch
        - finalizationPoint
        - height
        - hash
      properties:
        finalizationEpoch:
          $ref: '#/components/schemas/FinalizationEpoch'
        finalizationPoint:
          $ref: '#/components/schemas/FinalizationPoint'
        height:
          $ref: '#/components/schemas/Height'
        hash:
          $ref: '#/components/schemas/Hash256'
    Hash256:
      type: string
      maxLength: 64
      format: hex
      example: FEDCBA9876543210FEDCBA9876543210FEDCBA9876543210FEDCBA9876543210
    HashLockEntryDTO:
      type: object
      required:
        - version
        - ownerAddress
        - mosaicId
        - amount
        - endHeight
        - status
        - hash
      properties:
        version:
          $ref: '#/components/schemas/StateVersion'
        ownerAddress:
          $ref: '#/components/schemas/Address'
        mosaicId:
          $ref: '#/components/schemas/MosaicId'
        amount:
          $ref: '#/components/schemas/Amount'
        endHeight:
          $ref: '#/components/schemas/Height'
        status:
          $ref: '#/components/schemas/LockStatus'
        hash:
          $ref: '#/components/schemas/Hash256'
    HashLockInfoDTO:
      type: object
      required:
        - id
        - lock
      properties:
        id:
          allOf:
            - $ref: '#/components/schemas/ID'
          example: 65204AB4242726662686A453
        lock:
          $ref: '#/components/schemas/HashLockEntryDTO'
    HashLockNetworkPropertiesDTO:
      type: object
      properties:
        lockedFundsPerAggregate:
          type: string
          description: Amount that has to be locked per aggregate in partial cache.
          example: 10'000'000
        maxHashLockDuration:
          type: string
          description: Maximum number of blocks for which a hash lock can exist.
          example: 2d
    HashLockPage:
      type: object
      required:
        - data
        - pagination
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/HashLockInfoDTO'
        pagination:
          $ref: '#/components/schemas/Pagination'
    HashLockTransactionDTO:
      type: object
      required:
        - size
        - signature
        - signerPublicKey
        - version
        - network
        - type
        - maxFee
        - deadline
        - mosaicId
        - amount
        - duration
        - hash
      properties:
        size:
          allOf:
            - $ref: '#/components/schemas/UInt32'
          description: Entity size in bytes.
        signature:
          $ref: '#/components/schemas/Signature'
        signerPublicKey:
          $ref: '#/components/schemas/PublicKey'
        version:
          type: integer
          description: Entity version.
          example: 1
        network:
          $ref: '#/components/schemas/NetworkTypeEnum'
        type:
          type: integer
          example: 32835
        maxFee:
          $ref: '#/components/schemas/Amount'
        deadline:
          $ref: '#/components/schemas/BlockDuration'
        mosaicId:
          $ref: '#/components/schemas/UnresolvedMosaicId'
        amount:
          $ref: '#/components/schemas/Amount'
        duration:
          $ref: '#/components/schemas/BlockDuration'
        hash:
          $ref: '#/components/schemas/Hash256'
      description: Transaction to lock funds before sending an aggregate bonded transaction.
    Height:
      type: string
      description: Height of the blockchain.
      example: '1'
    ID:
      type: string
      description: Internal resource identifier.
      example: 67CA9E5B1F221298E20D97CB
    Importance:
      type: string
      description: Probability of an account to harvest the next block.
      example: '0'
    ImportanceBlockDTO:
      type: object
      required:
        - size
        - signature
        - signerPublicKey
        - version
        - network
        - type
        - height
        - timestamp
        - difficulty
        - proofGamma
        - proofVerificationHash
        - proofScalar
        - previousBlockHash
        - transactionsHash
        - receiptsHash
        - stateHash
        - beneficiaryAddress
        - feeMultiplier
        - votingEligibleAccountsCount
        - harvestingEligibleAccountsCount
        - totalVotingBalance
        - previousImportanceBlockHash
      properties:
        size:
          allOf:
            - $ref: '#/components/schemas/UInt32'
          description: Entity size in bytes.
        signature:
          $ref: '#/components/schemas/Signature'
        signerPublicKey:
          $ref: '#/components/schemas/PublicKey'
        version:
          type: integer
          description: Entity version.
          example: 1
        network:
          $ref: '#/components/schemas/NetworkTypeEnum'
        type:
          type: integer
          example: 32835
        height:
          $ref: '#/components/schemas/Height'
        timestamp:
          $ref: '#/components/schemas/Timestamp'
        difficulty:
          $ref: '#/components/schemas/Difficulty'
        proofGamma:
          $ref: '#/components/schemas/ProofGamma'
        proofVerificationHash:
          $ref: '#/components/schemas/ProofVerificationHash'
        proofScalar:
          $ref: '#/components/schemas/ProofScalar'
        previousBlockHash:
          $ref: '#/components/schemas/Hash256'
        transactionsHash:
          $ref: '#/components/schemas/Hash256'
        receiptsHash:
          $ref: '#/components/schemas/Hash256'
        stateHash:
          $ref: '#/components/schemas/Hash256'
        beneficiaryAddress:
          $ref: '#/components/schemas/Address'
        feeMultiplier:
          $ref: '#/components/schemas/BlockFeeMultiplier'
        votingEligibleAccountsCount:
          allOf:
            - $ref: '#/components/schemas/UInt32'
          description: Number of voting eligible accounts.
        harvestingEligibleAccountsCount:
          allOf:
            - $ref: '#/components/schemas/UInt64'
          description: Number of harvesting eligible accounts.
        totalVotingBalance:
          allOf:
            - $ref: '#/components/schemas/Amount'
          description: Total balance eligible for voting.
        previousImportanceBlockHash:
          allOf:
            - $ref: '#/components/schemas/Hash256'
          description: Previous importance block hash.
    InflationReceiptDTO:
      type: object
      required:
        - version
        - type
        - mosaicId
        - amount
      properties:
        version:
          type: integer
          description: Version of the receipt.
        type:
          $ref: '#/components/schemas/ReceiptTypeEnum'
        mosaicId:
          $ref: '#/components/schemas/MosaicId'
        amount:
          $ref: '#/components/schemas/Amount'
      description: Receipt stored when network currency mosaics were created due to inflation.
    LinkActionEnum:
      type: number
      enum:
        - 0
        - 1
      description: |-
        Type of action:
        * 0 - Unlink.
        * 1 - Link.
    LockHashAlgorithmEnum:
      type: number
      enum:
        - 0
        - 1
        - 2
      description: |-
        Algorithm used to hash the proof:
        * 0 (Op_Sha3_256) - Proof is hashed using SHA3-256.
        * 1 (Op_Hash_160) - Proof is hashed twice: first with SHA-256 and then with RIPEMD-160 (bitcoin's OP_HASH160).
        * 2 (Op_Hash_256) - Proof is hashed twice with SHA3-256 (bitcoin's OP_HASH256).
    LockStatus:
      type: number
      enum:
        - 0
        - 1
      description: |-
        Possible status of lock states:
        * 0 - UNUSED.
        * 1 - USED.
    MerklePathItemDTO:
      type: object
      properties:
        position:
          $ref: '#/components/schemas/PositionEnum'
        hash:
          $ref: '#/components/schemas/Hash256'
      description: Each merkle path item is composed of a hash, and a position relative to the proofHash being evaluated.
    MerkleProofInfoDTO:
      type: object
      properties:
        merklePath:
          type: array
          items:
            $ref: '#/components/schemas/MerklePathItemDTO'
          description: List of complementary merkle path items needed to recalculate the merkle root.
    MerkleStateInfoDTO:
      type: object
      required:
        - raw
        - tree
      properties:
        raw:
          $ref: '#/components/schemas/MerkleTreeRaw'
        tree:
          type: array
          items:
            anyOf:
              - $ref: '#/components/schemas/MerkleTreeBranchDTO'
              - $ref: '#/components/schemas/MerkleTreeLeafDTO'
          description: Merkle tree parsed from merkle tree raw.
      description: The merkle path information clients can use to proof the state of the given entity.
    MerkleTreeBranchDTO:
      type: object
      required:
        - type
        - path
        - encodedPath
        - nibbleCount
        - linkMask
        - links
        - branchHash
      properties:
        type:
          allOf:
            - $ref: '#/components/schemas/MerkleTreeNodeTypeEnum'
          description: Merkle tree node type.
          example: 0
        path:
          type: string
          description: Branch link path.
          example: 484196B44369B764
        encodedPath:
          type: string
          description: Encoded branch link path.
          example: 484196B44369B764
        nibbleCount:
          type: integer
          description: Nibble count.
          example: 1
        linkMask:
          type: string
          description: Branch link bitmask.
          example: '0000000000000000'
        links:
          type: array
          items:
            $ref: '#/components/schemas/MerkleTreeBranchLinkDTO'
          description: Branch links (max 16).
        branchHash:
          allOf:
            - $ref: '#/components/schemas/Hash256'
          description: Hash of the branch node.
      description: Merkle tree branch node.
    MerkleTreeBranchLinkDTO:
      type: object
      required:
        - bit
        - link
      properties:
        bit:
          type: string
          description: Branch link nibble bit index (hexadecimal).
          example: F
        link:
          allOf:
            - $ref: '#/components/schemas/Hash256'
          description: Branch link hash.
      description: Merkle tree branch link.
    MerkleTreeLeafDTO:
      type: object
      required:
        - type
        - path
        - encodedPath
        - nibbleCount
        - value
        - leafHash
      properties:
        type:
          allOf:
            - $ref: '#/components/schemas/MerkleTreeNodeTypeEnum'
          description: Merkle tree node type.
          example: 255
        path:
          type: string
          description: Leaf path.
          example: 484196B44369B764
        encodedPath:
          type: string
          description: Encoded leaf path.
          example: 484196B44369B764
        nibbleCount:
          type: integer
          description: Nibble count.
          example: 1
        value:
          type: string
          description: Leaf value (sha256 hash).
          example: 484196B44369B764
        leafHash:
          allOf:
            - $ref: '#/components/schemas/Hash256'
          description: Hash of the leaf node.
      description: Merkle tree leaf node.
    MerkleTreeNodeTypeEnum:
      type: number
      enum:
        - 0
        - 255
      description: |-
        Type of Merkle tree node:
        * 0 - Branch node.
        * 255 - Leaf node.
    MerkleTreeRaw:
      type: string
      format: hex
      description: |-
        The hex information of the complete merkle tree as returned by server api.
        More information can be found in chapter 4.3 of the catapult whitepaper.
      example: '0000000000000000000000000000000000000000000000000000000000000000'
    MessageGroup:
      type: object
      required:
        - stage
        - height
        - hashes
        - signatures
      properties:
        stage:
          allOf:
            - $ref: '#/components/schemas/StageEnum'
          description: Message stage
        height:
          allOf:
            - $ref: '#/components/schemas/Height'
          description: Block height corresponding to the first hash.
        hashes:
          type: array
          items:
            $ref: '#/components/schemas/Hash256'
        signatures:
          type: array
          items:
            $ref: '#/components/schemas/BmTreeSignature'
    MetadataEntryDTO:
      type: object
      required:
        - version
        - compositeHash
        - sourceAddress
        - targetAddress
        - scopedMetadataKey
        - metadataType
        - value
      properties:
        version:
          $ref: '#/components/schemas/StateVersion'
        compositeHash:
          $ref: '#/components/schemas/Hash256'
        sourceAddress:
          $ref: '#/components/schemas/Address'
        targetAddress:
          $ref: '#/components/schemas/Address'
        scopedMetadataKey:
          $ref: '#/components/schemas/MetadataKey'
        targetId:
          anyOf:
            - $ref: '#/components/schemas/MosaicId'
            - $ref: '#/components/schemas/NamespaceId'
        metadataType:
          $ref: '#/components/schemas/MetadataTypeEnum'
        value:
          type: string
          format: hex
          description: Metadata value.
    MetadataInfoDTO:
      type: object
      required:
        - id
        - metadataEntry
      properties:
        id:
          allOf:
            - $ref: '#/components/schemas/ID'
          example: 65204AB4242726662686A453
        metadataEntry:
          $ref: '#/components/schemas/MetadataEntryDTO'
    MetadataKey:
      type: string
      format: hex
      description: Metadata key scoped to source, target and type expressed.
      example: 0A1B2C3D4E5F6789
    MetadataNetworkPropertiesDTO:
      type: object
      properties:
        maxValueSize:
          type: string
          description: Maximum metadata value size.
          example: '1024'
    MetadataPage:
      type: object
      required:
        - data
        - pagination
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/MetadataInfoDTO'
        pagination:
          $ref: '#/components/schemas/Pagination'
    MetadataTypeEnum:
      type: number
      enum:
        - 0
        - 1
        - 2
      description: |-
        Metadata type:
        * 0 - Account.
        * 1 - Mosaic.
        * 2 - Namespace.
    MetadataValue:
      type: string
      format: hex
      description: Metadata value. If embedded in a transaction, this is calculated as xor(previous-value, value).
      example: 0A1B2C3D4E5F6789
    ModelError:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: string
          example: InvalidArgument
        message:
          type: string
          example: The argument is invalid.
    Mosaic:
      type: object
      required:
        - id
        - amount
      properties:
        id:
          $ref: '#/components/schemas/MosaicId'
        amount:
          $ref: '#/components/schemas/Amount'
    MosaicAddressRestrictionDTO:
      type: object
      required:
        - id
        - mosaicRestrictionEntry
      properties:
        id:
          $ref: '#/components/schemas/ID'
        mosaicRestrictionEntry:
          $ref: '#/components/schemas/MosaicAddressRestrictionEntryWrapperDTO'
    MosaicAddressRestrictionEntryDTO:
      type: object
      required:
        - key
        - value
      properties:
        key:
          $ref: '#/components/schemas/RestrictionKey'
        value:
          type: string
          description: Restriction value.
    MosaicAddressRestrictionEntryWrapperDTO:
      type: object
      required:
        - version
        - compositeHash
        - entryType
        - mosaicId
        - targetAddress
        - restrictions
      properties:
        version:
          $ref: '#/components/schemas/StateVersion'
        compositeHash:
          $ref: '#/components/schemas/Hash256'
        entryType:
          $ref: '#/components/schemas/MosaicRestrictionEntryTypeEnum'
        mosaicId:
          $ref: '#/components/schemas/MosaicId'
        targetAddress:
          $ref: '#/components/schemas/Address'
        restrictions:
          type: array
          items:
            $ref: '#/components/schemas/MosaicAddressRestrictionEntryDTO'
    MosaicAddressRestrictionTransactionDTO:
      type: object
      required:
        - size
        - signature
        - signerPublicKey
        - version
        - network
        - type
        - maxFee
        - deadline
        - mosaicId
        - restrictionKey
        - previousRestrictionValue
        - newRestrictionValue
        - targetAddress
      properties:
        size:
          allOf:
            - $ref: '#/components/schemas/UInt32'
          description: Entity size in bytes.
        signature:
          $ref: '#/components/schemas/Signature'
        signerPublicKey:
          $ref: '#/components/schemas/PublicKey'
        version:
          type: integer
          description: Entity version.
          example: 1
        network:
          $ref: '#/components/schemas/NetworkTypeEnum'
        type:
          type: integer
          example: 32835
        maxFee:
          $ref: '#/components/schemas/Amount'
        deadline:
          $ref: '#/components/schemas/BlockDuration'
        mosaicId:
          $ref: '#/components/schemas/UnresolvedMosaicId'
        restrictionKey:
          $ref: '#/components/schemas/RestrictionKey'
        previousRestrictionValue:
          $ref: '#/components/schemas/RestrictionValue'
        newRestrictionValue:
          $ref: '#/components/schemas/RestrictionValue'
        targetAddress:
          $ref: '#/components/schemas/UnresolvedAddress'
      description: Transaction to set a restriction rule to an address.
    MosaicAliasTransactionDTO:
      type: object
      required:
        - size
        - signature
        - signerPublicKey
        - version
        - network
        - type
        - maxFee
        - deadline
        - namespaceId
        - mosaicId
        - aliasAction
      properties:
        size:
          allOf:
            - $ref: '#/components/schemas/UInt32'
          description: Entity size in bytes.
        signature:
          $ref: '#/components/schemas/Signature'
        signerPublicKey:
          $ref: '#/components/schemas/PublicKey'
        version:
          type: integer
          description: Entity version.
          example: 1
        network:
          $ref: '#/components/schemas/NetworkTypeEnum'
        type:
          type: integer
          example: 32835
        maxFee:
          $ref: '#/components/schemas/Amount'
        deadline:
          $ref: '#/components/schemas/BlockDuration'
        namespaceId:
          $ref: '#/components/schemas/NamespaceId'
        mosaicId:
          $ref: '#/components/schemas/MosaicId'
        aliasAction:
          $ref: '#/components/schemas/AliasActionEnum'
      description: Transaction to link a namespace to a mosaic.
    MosaicDTO:
      type: object
      required:
        - version
        - id
        - supply
        - startHeight
        - ownerAddress
        - revision
        - flags
        - divisibility
        - duration
      properties:
        version:
          $ref: '#/components/schemas/StateVersion'
        id:
          $ref: '#/components/schemas/MosaicId'
        supply:
          $ref: '#/components/schemas/Amount'
        startHeight:
          $ref: '#/components/schemas/Height'
        ownerAddress:
          $ref: '#/components/schemas/Address'
        revision:
          allOf:
            - $ref: '#/components/schemas/UInt32'
          description: Number of definitions for the same mosaic.
        flags:
          $ref: '#/components/schemas/MosaicFlagsEnum'
        divisibility:
          type: integer
          description: |-
            Determines up to what decimal place the mosaic can be divided.
            Divisibility of 3 means that a mosaic can be divided into smallest parts of 0.001 mosaics.
            The divisibility must be in the range of 0 and 6.
          example: 6
        duration:
          $ref: '#/components/schemas/BlockDuration'
    MosaicDefinitionTransactionDTO:
      type: object
      required:
        - size
        - signature
        - signerPublicKey
        - version
        - network
        - type
        - maxFee
        - deadline
        - id
        - duration
        - nonce
        - flags
        - divisibility
      properties:
        size:
          allOf:
            - $ref: '#/components/schemas/UInt32'
          description: Entity size in bytes.
        signature:
          $ref: '#/components/schemas/Signature'
        signerPublicKey:
          $ref: '#/components/schemas/PublicKey'
        version:
          type: integer
          description: Entity version.
          example: 1
        network:
          $ref: '#/components/schemas/NetworkTypeEnum'
        type:
          type: integer
          example: 32835
        maxFee:
          $ref: '#/components/schemas/Amount'
        deadline:
          $ref: '#/components/schemas/BlockDuration'
        id:
          $ref: '#/components/schemas/MosaicId'
        duration:
          $ref: '#/components/schemas/BlockDuration'
        nonce:
          allOf:
            - $ref: '#/components/schemas/UInt32'
          description: Random nonce used to generate the mosaic id.
        flags:
          $ref: '#/components/schemas/MosaicFlagsEnum'
        divisibility:
          type: integer
          description: |-
            Determines up to what decimal place the mosaic can be divided.
            Divisibility of 3 means that a mosaic can be divided into smallest parts of 0.001 mosaics.
            The divisibility must be in the range of 0 and 6.
      description: Transaction to create a new mosaic.
    MosaicExpiryReceiptDTO:
      type: object
      required:
        - version
        - type
        - artifactId
      properties:
        version:
          type: integer
          description: Version of the receipt.
        type:
          $ref: '#/components/schemas/ReceiptTypeEnum'
        artifactId:
          $ref: '#/components/schemas/MosaicId'
      description: Receipt stored when a mosaic expires.
    MosaicFlagsEnum:
      type: integer
      description: |-
        - 0x00 (none) - No flags present.
        - 0x01 (supplyMutable) - Mosaic supports supply changes even when mosaic owner owns partial supply.
        - 0x02 (transferable) - Mosaic supports transfers between arbitrary accounts. When not set, mosaic can only be transferred to
        and from mosaic owner.
        - 0x04 (restrictable) - Mosaic supports custom restrictions configured by mosaic owner.
        - 0x08 (revokable) - Mosaic allows creator to revoke balances from another user.
      example: 1
    MosaicGlobalRestrictionDTO:
      type: object
      required:
        - id
        - mosaicRestrictionEntry
      properties:
        id:
          $ref: '#/components/schemas/ID'
        mosaicRestrictionEntry:
          $ref: '#/components/schemas/MosaicGlobalRestrictionEntryWrapperDTO'
    MosaicGlobalRestrictionEntryDTO:
      type: object
      required:
        - key
        - restriction
      properties:
        key:
          $ref: '#/components/schemas/RestrictionKey'
        restriction:
          $ref: '#/components/schemas/MosaicGlobalRestrictionEntryRestrictionDTO'
    MosaicGlobalRestrictionEntryRestrictionDTO:
      type: object
      required:
        - referenceMosaicId
        - restrictionValue
        - restrictionType
      properties:
        referenceMosaicId:
          $ref: '#/components/schemas/MosaicId'
        restrictionValue:
          $ref: '#/components/schemas/RestrictionValue'
        restrictionType:
          $ref: '#/components/schemas/MosaicRestrictionTypeEnum'
    MosaicGlobalRestrictionEntryWrapperDTO:
      type: object
      required:
        - version
        - compositeHash
        - entryType
        - mosaicId
        - restrictions
      properties:
        version:
          $ref: '#/components/schemas/StateVersion'
        compositeHash:
          $ref: '#/components/schemas/Hash256'
        entryType:
          $ref: '#/components/schemas/MosaicRestrictionEntryTypeEnum'
        mosaicId:
          $ref: '#/components/schemas/MosaicId'
        restrictions:
          type: array
          items:
            $ref: '#/components/schemas/MosaicGlobalRestrictionEntryDTO'
    MosaicGlobalRestrictionTransactionDTO:
      type: object
      required:
        - size
        - signature
        - signerPublicKey
        - version
        - network
        - type
        - maxFee
        - deadline
        - mosaicId
        - referenceMosaicId
        - restrictionKey
        - previousRestrictionValue
        - newRestrictionValue
        - previousRestrictionType
        - newRestrictionType
      properties:
        size:
          allOf:
            - $ref: '#/components/schemas/UInt32'
          description: Entity size in bytes.
        signature:
          $ref: '#/components/schemas/Signature'
        signerPublicKey:
          $ref: '#/components/schemas/PublicKey'
        version:
          type: integer
          description: Entity version.
          example: 1
        network:
          $ref: '#/components/schemas/NetworkTypeEnum'
        type:
          type: integer
          example: 32835
        maxFee:
          $ref: '#/components/schemas/Amount'
        deadline:
          $ref: '#/components/schemas/BlockDuration'
        mosaicId:
          $ref: '#/components/schemas/UnresolvedMosaicId'
        referenceMosaicId:
          $ref: '#/components/schemas/UnresolvedMosaicId'
        restrictionKey:
          $ref: '#/components/schemas/RestrictionKey'
        previousRestrictionValue:
          $ref: '#/components/schemas/RestrictionValue'
        newRestrictionValue:
          $ref: '#/components/schemas/RestrictionValue'
        previousRestrictionType:
          $ref: '#/components/schemas/MosaicRestrictionTypeEnum'
        newRestrictionType:
          $ref: '#/components/schemas/MosaicRestrictionTypeEnum'
      description: Transaction to set a network-wide restriction rule to a mosaic.
    MosaicId:
      type: string
      format: hex
      description: Mosaic identifier.
      example: 85BBEA6CC462B244
    MosaicInfoDTO:
      type: object
      required:
        - id
        - mosaic
      properties:
        id:
          $ref: '#/components/schemas/ID'
        mosaic:
          $ref: '#/components/schemas/MosaicDTO'
    MosaicMetadataTransactionDTO:
      type: object
      required:
        - size
        - signature
        - signerPublicKey
        - version
        - network
        - type
        - maxFee
        - deadline
        - targetAddress
        - scopedMetadataKey
        - targetMosaicId
        - valueSizeDelta
        - valueSize
        - value
      properties:
        size:
          allOf:
            - $ref: '#/components/schemas/UInt32'
          description: Entity size in bytes.
        signature:
          $ref: '#/components/schemas/Signature'
        signerPublicKey:
          $ref: '#/components/schemas/PublicKey'
        version:
          type: integer
          description: Entity version.
          example: 1
        network:
          $ref: '#/components/schemas/NetworkTypeEnum'
        type:
          type: integer
          example: 32835
        maxFee:
          $ref: '#/components/schemas/Amount'
        deadline:
          $ref: '#/components/schemas/BlockDuration'
        targetAddress:
          $ref: '#/components/schemas/UnresolvedAddress'
        scopedMetadataKey:
          $ref: '#/components/schemas/MetadataKey'
        targetMosaicId:
          $ref: '#/components/schemas/UnresolvedMosaicId'
        valueSizeDelta:
          type: integer
          description: Change in value size in bytes.
        valueSize:
          allOf:
            - $ref: '#/components/schemas/UInt32'
          description: Value size in bytes.
        value:
          $ref: '#/components/schemas/MetadataValue'
      description: Transaction to create or modify a multisig account.
    MosaicNamesDTO:
      type: object
      required:
        - mosaicId
        - names
      properties:
        mosaicId:
          $ref: '#/components/schemas/MosaicId'
        names:
          type: array
          items:
            type: string
          description: Mosaic linked namespace names.
    MosaicNetworkPropertiesDTO:
      type: object
      properties:
        maxMosaicsPerAccount:
          type: string
          description: Maximum number of mosaics that an account can own.
          example: '10000'
        maxMosaicDuration:
          type: string
          description: Maximum mosaic duration.
          example: 365d
        maxMosaicDivisibility:
          type: string
          description: Maximum mosaic divisibility.
          example: '6'
        mosaicRentalFeeSinkAddress:
          allOf:
            - $ref: '#/components/schemas/Address'
          description: Address of the mosaic rental fee sink account.
          example: TAMESPACEWH4MKFMBCVFERDPOOP4FK7MTDJEYP35
        mosaicRentalFee:
          type: string
          description: Mosaic rental fee.
          example: 500'000'000
    MosaicPage:
      type: object
      required:
        - data
        - pagination
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/MosaicInfoDTO'
        pagination:
          $ref: '#/components/schemas/Pagination'
    MosaicRestrictionDTO:
      anyOf:
        - $ref: '#/components/schemas/MosaicAddressRestrictionDTO'
        - $ref: '#/components/schemas/MosaicGlobalRestrictionDTO'
      description: Generic Mosaic Restriction
    MosaicRestrictionEntryTypeEnum:
      type: number
      enum:
        - 0
        - 1
      description: |-
        - 0 - Mosaic address restriction.
        - 1 - Mosaic global restriction.
    MosaicRestrictionNetworkPropertiesDTO:
      type: object
      properties:
        maxMosaicRestrictionValues:
          type: string
          description: Maximum number of mosaic restriction values.
    MosaicRestrictionTypeEnum:
      type: number
      enum:
        - 0
        - 1
        - 2
        - 3
        - 4
        - 5
        - 6
      description: |-
        Type of mosaic restriction.
        * 0 - Uninitialized value indicating no restriction.
        * 1 (EQ) - Allow if equal.
        * 2 (NE) - Allow if not equal.
        * 3 (LT) - Allow if less than.
        * 4 (LE) - Allow if less than or equal.
        * 5 (GT) - Allow if greater than.
        * 6 (GE) - Allow if greater than or equal.
    MosaicRestrictionsPage:
      type: object
      required:
        - data
        - pagination
      properties:
        data:
          type: array
          items:
            anyOf:
              - $ref: '#/components/schemas/MosaicAddressRestrictionDTO'
              - $ref: '#/components/schemas/MosaicGlobalRestrictionDTO'
        pagination:
          $ref: '#/components/schemas/Pagination'
    MosaicSupplyChangeActionEnum:
      type: number
      enum:
        - 0
        - 1
      description: |-
        Direction of the supply change:
        * 0  - Decrease.
        * 1  - Increase.
    MosaicSupplyChangeTransactionDTO:
      type: object
      required:
        - size
        - signature
        - signerPublicKey
        - version
        - network
        - type
        - maxFee
        - deadline
        - mosaicId
        - delta
        - action
      properties:
        size:
          allOf:
            - $ref: '#/components/schemas/UInt32'
          description: Entity size in bytes.
        signature:
          $ref: '#/components/schemas/Signature'
        signerPublicKey:
          $ref: '#/components/schemas/PublicKey'
        version:
          type: integer
          description: Entity version.
          example: 1
        network:
          $ref: '#/components/schemas/NetworkTypeEnum'
        type:
          type: integer
          example: 32835
        maxFee:
          $ref: '#/components/schemas/Amount'
        deadline:
          $ref: '#/components/schemas/BlockDuration'
        mosaicId:
          $ref: '#/components/schemas/UnresolvedMosaicId'
        delta:
          $ref: '#/components/schemas/Amount'
        action:
          $ref: '#/components/schemas/MosaicSupplyChangeActionEnum'
      description: Transaction to increase or decrease the supply of a mosaic.
    MosaicSupplyRevocationTransactionDTO:
      type: object
      required:
        - size
        - signature
        - signerPublicKey
        - version
        - network
        - type
        - maxFee
        - deadline
        - sourceAddress
        - mosaicId
        - amount
      properties:
        size:
          allOf:
            - $ref: '#/components/schemas/UInt32'
          description: Entity size in bytes.
        signature:
          $ref: '#/components/schemas/Signature'
        signerPublicKey:
          $ref: '#/components/schemas/PublicKey'
        version:
          type: integer
          description: Entity version.
          example: 1
        network:
          $ref: '#/components/schemas/NetworkTypeEnum'
        type:
          type: integer
          example: 32835
        maxFee:
          $ref: '#/components/schemas/Amount'
        deadline:
          $ref: '#/components/schemas/BlockDuration'
        sourceAddress:
          $ref: '#/components/schemas/UnresolvedAddress'
        mosaicId:
          $ref: '#/components/schemas/UnresolvedMosaicId'
        amount:
          $ref: '#/components/schemas/Amount'
      description: Transaction that allows the mosaic creator to revoke some balance from a user.
    MosaicsNamesDTO:
      type: object
      required:
        - mosaicNames
      properties:
        mosaicNames:
          type: array
          items:
            $ref: '#/components/schemas/MosaicNamesDTO'
          description: Array of mosaic names.
    MultisigAccountGraphInfoDTO:
      type: object
      required:
        - level
        - multisigEntries
      properties:
        level:
          type: integer
          description: Level of the multisig account.
          example: 1
        multisigEntries:
          type: array
          items:
            $ref: '#/components/schemas/MultisigAccountInfoDTO'
          description: Array of multisig accounts for this level.
    MultisigAccountInfoDTO:
      type: object
      required:
        - multisig
      properties:
        multisig:
          $ref: '#/components/schemas/MultisigDTO'
    MultisigAccountModificationTransactionDTO:
      type: object
      required:
        - size
        - signature
        - signerPublicKey
        - version
        - network
        - type
        - maxFee
        - deadline
        - minRemovalDelta
        - minApprovalDelta
        - addressAdditions
        - addressDeletions
      properties:
        size:
          allOf:
            - $ref: '#/components/schemas/UInt32'
          description: Entity size in bytes.
        signature:
          $ref: '#/components/schemas/Signature'
        signerPublicKey:
          $ref: '#/components/schemas/PublicKey'
        version:
          type: integer
          description: Entity version.
          example: 1
        network:
          $ref: '#/components/schemas/NetworkTypeEnum'
        type:
          type: integer
          example: 32835
        maxFee:
          $ref: '#/components/schemas/Amount'
        deadline:
          $ref: '#/components/schemas/BlockDuration'
        minRemovalDelta:
          type: integer
          description: |-
            Number of signatures needed to remove a cosignatory.
            If we are modifying an existing multisig account, this indicates the relative change of the minimum cosignatories.
        minApprovalDelta:
          type: integer
          description: |-
            Number of signatures needed to approve a transaction.
            If we are modifying an existing multisig account, this indicates the relative change of the minimum cosignatories.
        addressAdditions:
          type: array
          items:
            $ref: '#/components/schemas/UnresolvedAddress'
          description: Array of cosignatory accounts to add.
        addressDeletions:
          type: array
          items:
            $ref: '#/components/schemas/UnresolvedAddress'
          description: Array of cosignatory accounts to delete.
      description: Transaction to create or modify a multisig account.
    MultisigDTO:
      type: object
      required:
        - version
        - accountAddress
        - minApproval
        - minRemoval
        - cosignatoryAddresses
        - multisigAddresses
      properties:
        version:
          $ref: '#/components/schemas/StateVersion'
        accountAddress:
          $ref: '#/components/schemas/Address'
        minApproval:
          allOf:
            - $ref: '#/components/schemas/UInt32'
          description: Number of signatures needed to approve a transaction.
        minRemoval:
          allOf:
            - $ref: '#/components/schemas/UInt32'
          description: Number of signatures needed to remove a cosignatory.
        cosignatoryAddresses:
          type: array
          items:
            $ref: '#/components/schemas/Address'
          description: Addresses of the cosignatory accounts.
        multisigAddresses:
          type: array
          items:
            $ref: '#/components/schemas/Address'
          description: Multisig accounts where the account is cosignatory.
    MultisigNetworkPropertiesDTO:
      type: object
      properties:
        maxMultisigDepth:
          type: string
          description: Maximum number of multisig levels.
          example: '3'
        maxCosignatoriesPerAccount:
          type: string
          description: Maximum number of cosignatories per account.
          example: '25'
        maxCosignedAccountsPerAccount:
          type: string
          description: Maximum number of accounts a single account can cosign.
          example: '25'
    NamespaceDTO:
      type: object
      required:
        - version
        - registrationType
        - depth
        - level0
        - alias
        - parentId
        - ownerAddress
        - startHeight
        - endHeight
      properties:
        version:
          $ref: '#/components/schemas/StateVersion'
        registrationType:
          $ref: '#/components/schemas/NamespaceRegistrationTypeEnum'
        depth:
          type: integer
          description: Level of the namespace.
        level0:
          $ref: '#/components/schemas/NamespaceId'
        level1:
          $ref: '#/components/schemas/NamespaceId'
        level2:
          $ref: '#/components/schemas/NamespaceId'
        alias:
          $ref: '#/components/schemas/AliasDTO'
        parentId:
          $ref: '#/components/schemas/NamespaceId'
        ownerAddress:
          $ref: '#/components/schemas/Address'
        startHeight:
          $ref: '#/components/schemas/Height'
        endHeight:
          $ref: '#/components/schemas/Height'
    NamespaceExpiryReceiptDTO:
      type: object
      required:
        - version
        - type
        - artifactId
      properties:
        version:
          type: integer
          description: Version of the receipt.
        type:
          $ref: '#/components/schemas/ReceiptTypeEnum'
        artifactId:
          $ref: '#/components/schemas/NamespaceId'
      description: Receipt stored when a namespace expires.
    NamespaceId:
      type: string
      format: hex
      description: Namespace identifier.
      example: 84B3552D375FFA4B
    NamespaceInfoDTO:
      type: object
      required:
        - id
        - meta
        - namespace
      properties:
        id:
          $ref: '#/components/schemas/ID'
        meta:
          $ref: '#/components/schemas/NamespaceMetaDTO'
        namespace:
          $ref: '#/components/schemas/NamespaceDTO'
    NamespaceMetaDTO:
      type: object
      required:
        - active
        - index
      properties:
        active:
          type: boolean
          description: If true, the namespace is active.
        index:
          type: integer
    NamespaceMetadataTransactionDTO:
      type: object
      required:
        - size
        - signature
        - signerPublicKey
        - version
        - network
        - type
        - maxFee
        - deadline
        - targetAddress
        - scopedMetadataKey
        - valueSizeDelta
        - valueSize
        - value
      properties:
        size:
          allOf:
            - $ref: '#/components/schemas/UInt32'
          description: Entity size in bytes.
        signature:
          $ref: '#/components/schemas/Signature'
        signerPublicKey:
          $ref: '#/components/schemas/PublicKey'
        version:
          type: integer
          description: Entity version.
          example: 1
        network:
          $ref: '#/components/schemas/NetworkTypeEnum'
        type:
          type: integer
          example: 32835
        maxFee:
          $ref: '#/components/schemas/Amount'
        deadline:
          $ref: '#/components/schemas/BlockDuration'
        targetAddress:
          $ref: '#/components/schemas/UnresolvedAddress'
        scopedMetadataKey:
          $ref: '#/components/schemas/MetadataKey'
        targetNamespaceId:
          $ref: '#/components/schemas/NamespaceId'
        valueSizeDelta:
          type: integer
          description: Change in value size in bytes.
        valueSize:
          allOf:
            - $ref: '#/components/schemas/UInt32'
          description: Value size in bytes.
        value:
          $ref: '#/components/schemas/MetadataValue'
      description: Transaction to create or modify a multisig account.
    NamespaceNameDTO:
      type: object
      required:
        - id
        - name
      properties:
        parentId:
          $ref: '#/components/schemas/NamespaceId'
        id:
          $ref: '#/components/schemas/NamespaceId'
        name:
          type: string
          description: Namespace name.
    NamespaceNetworkPropertiesDTO:
      type: object
      properties:
        maxNameSize:
          type: string
          description: Maximum namespace name size.
          example: '64'
        maxChildNamespaces:
          type: string
          description: Maximum number of children for a root namespace.
          example: '100'
        maxNamespaceDepth:
          type: string
          description: Maximum namespace depth.
          example: '3'
        minNamespaceDuration:
          type: string
          description: Minimum namespace duration.
          example: 30d
        maxNamespaceDuration:
          type: string
          description: Maximum namespace duration.
          example: 1825d
        namespaceGracePeriodDuration:
          type: string
          description: Grace period during which time only the previous owner can renew an expired namespace.
          example: 1d
        reservedRootNamespaceNames:
          type: string
          description: Reserved root namespaces that cannot be claimed.
          example: symbol, symbl, xym, xem, nem, user, account, org, com, biz, net, edu, mil, gov, info
        namespaceRentalFeeSinkAddress:
          allOf:
            - $ref: '#/components/schemas/Address'
          description: Address of the namespace rental fee sink account.
          example: TDVFW6NZN3YI6O4ZRYZHGY73KADCW4HX6IDIKZI
        rootNamespaceRentalFeePerBlock:
          type: string
          description: Root namespace rental fee per block.
          example: '2'
        childNamespaceRentalFee:
          type: string
          description: Child namespace rental fee.
          example: '100000'
    NamespacePage:
      type: object
      required:
        - data
        - pagination
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/NamespaceInfoDTO'
        pagination:
          $ref: '#/components/schemas/Pagination'
    NamespaceRegistrationTransactionDTO:
      type: object
      required:
        - size
        - signature
        - signerPublicKey
        - version
        - network
        - type
        - maxFee
        - deadline
        - id
        - registrationType
        - name
      properties:
        size:
          allOf:
            - $ref: '#/components/schemas/UInt32'
          description: Entity size in bytes.
        signature:
          $ref: '#/components/schemas/Signature'
        signerPublicKey:
          $ref: '#/components/schemas/PublicKey'
        version:
          type: integer
          description: Entity version.
          example: 1
        network:
          $ref: '#/components/schemas/NetworkTypeEnum'
        type:
          type: integer
          example: 32835
        maxFee:
          $ref: '#/components/schemas/Amount'
        deadline:
          $ref: '#/components/schemas/BlockDuration'
        duration:
          $ref: '#/components/schemas/BlockDuration'
        parentId:
          $ref: '#/components/schemas/NamespaceId'
        id:
          $ref: '#/components/schemas/NamespaceId'
        registrationType:
          $ref: '#/components/schemas/NamespaceRegistrationTypeEnum'
        name:
          type: string
          description: Namespace name.
      description: Transaction to create or renew a namespace.
    NamespaceRegistrationTypeEnum:
      type: number
      enum:
        - 0
        - 1
      description: |-
        Type of namespace:
        * 0 - Root namespace.
        * 1 - Subnamespace.
    NetworkConfigurationDTO:
      type: object
      required:
        - network
        - chain
        - plugins
      properties:
        network:
          $ref: '#/components/schemas/NetworkPropertiesDTO'
        chain:
          $ref: '#/components/schemas/ChainPropertiesDTO'
        plugins:
          $ref: '#/components/schemas/PluginsPropertiesDTO'
    NetworkPropertiesDTO:
      type: object
      properties:
        identifier:
          type: string
          description: Network identifier.
          example: testnet
        nodeEqualityStrategy:
          $ref: '#/components/schemas/NodeIdentityEqualityStrategy'
        nemesisSignerPublicKey:
          allOf:
            - $ref: '#/components/schemas/PublicKey'
          description: Nemesis public key.
          example: AC1A6E1D8DE5B17D2C6B1293F1E3BE85A6493C8C3971E7A09471384B966E442D
        generationHashSeed:
          allOf:
            - $ref: '#/components/schemas/Hash256'
          description: Seed for generating Nemesis generation hash.
          example: 57F7DA205008026C776CB6AED843393F04CD458E0AA2D9F1D5F31A402072B2D6
        epochAdjustment:
          type: string
          description: Nemesis epoch time adjustment.
          example: 1573430400s
      description: Network related configuration properties.
    NetworkTypeDTO:
      type: object
      required:
        - name
        - description
      properties:
        name:
          type: string
          description: Network name.
          example: testnet
        description:
          type: string
          description: A short text describing the network.
          example: Symbol Sainet Network
    NetworkTypeEnum:
      type: number
      enum:
        - 104
        - 152
      description: |-
        Network type:
        * 0x68 (104 decimal) - Main network.
        * 0x98 (152 decimal) - Test network.
    NodeHealthDTO:
      type: object
      required:
        - apiNode
        - db
      properties:
        apiNode:
          allOf:
            - $ref: '#/components/schemas/NodeStatusEnum'
          description: API node service status.
        db:
          allOf:
            - $ref: '#/components/schemas/NodeStatusEnum'
          description: MongoDB service status.
    NodeHealthInfoDTO:
      type: object
      required:
        - status
      properties:
        status:
          $ref: '#/components/schemas/NodeHealthDTO'
    NodeIdentityEqualityStrategy:
      type: string
      enum:
        - host
        - public-key
      description: Node equality strategy. Defines if the identifier for the node must be its public key or host.
    NodeInfoDTO:
      type: object
      required:
        - version
        - publicKey
        - networkGenerationHashSeed
        - roles
        - port
        - networkIdentifier
        - friendlyName
        - host
      properties:
        version:
          type: integer
          description: Version of the application.
          example: 16777991
        publicKey:
          $ref: '#/components/schemas/PublicKey'
        networkGenerationHashSeed:
          $ref: '#/components/schemas/Hash256'
        roles:
          $ref: '#/components/schemas/RolesTypeEnum'
        port:
          type: integer
          description: Port used for the communication.
          example: 7900
        networkIdentifier:
          type: integer
          example: 152
        friendlyName:
          type: string
          description: Node friendly name.
          example: mock-server
        host:
          type: string
          description: Node IP address.
          example: 192.0.2.1
        nodePublicKey:
          $ref: '#/components/schemas/PublicKey'
    NodeKeyLinkTransactionDTO:
      type: object
      required:
        - size
        - signature
        - signerPublicKey
        - version
        - network
        - type
        - maxFee
        - deadline
        - linkedPublicKey
        - linkAction
      properties:
        size:
          allOf:
            - $ref: '#/components/schemas/UInt32'
          description: Entity size in bytes.
        signature:
          $ref: '#/components/schemas/Signature'
        signerPublicKey:
          $ref: '#/components/schemas/PublicKey'
        version:
          type: integer
          description: Entity version.
          example: 1
        network:
          $ref: '#/components/schemas/NetworkTypeEnum'
        type:
          type: integer
          example: 32835
        maxFee:
          $ref: '#/components/schemas/Amount'
        deadline:
          $ref: '#/components/schemas/BlockDuration'
        linkedPublicKey:
          $ref: '#/components/schemas/PublicKey'
        linkAction:
          $ref: '#/components/schemas/LinkActionEnum'
      description: |-
        Transaction to link a public key to an account.
        TLS uses the linked public key to create sessions.
        Required for node operators.
    NodeStatusEnum:
      type: string
      enum:
        - up
        - down
    NodeTimeDTO:
      type: object
      required:
        - communicationTimestamps
      properties:
        communicationTimestamps:
          $ref: '#/components/schemas/CommunicationTimestampsDTO'
    Order:
      type: string
      enum:
        - asc
        - desc
      description: |-
        Indicates how to sort the results:
        * ``asc`` - ascending
        * ``desc`` - descending
    Pagination:
      type: object
      required:
        - pageNumber
        - pageSize
      properties:
        pageNumber:
          type: integer
          example: 1
        pageSize:
          type: integer
          example: 10
    ParentPublicKeySignaturePair:
      type: object
      required:
        - parentPublicKey
        - signature
      properties:
        parentPublicKey:
          $ref: '#/components/schemas/PublicKey'
        signature:
          $ref: '#/components/schemas/Signature'
    PluginsPropertiesDTO:
      type: object
      properties:
        accountlink:
          $ref: '#/components/schemas/AccountKeyLinkNetworkPropertiesDTO'
        aggregate:
          $ref: '#/components/schemas/AggregateNetworkPropertiesDTO'
        lockhash:
          $ref: '#/components/schemas/HashLockNetworkPropertiesDTO'
        locksecret:
          $ref: '#/components/schemas/SecretLockNetworkPropertiesDTO'
        metadata:
          $ref: '#/components/schemas/MetadataNetworkPropertiesDTO'
        mosaic:
          $ref: '#/components/schemas/MosaicNetworkPropertiesDTO'
        multisig:
          $ref: '#/components/schemas/MultisigNetworkPropertiesDTO'
        namespace:
          $ref: '#/components/schemas/NamespaceNetworkPropertiesDTO'
        restrictionaccount:
          $ref: '#/components/schemas/AccountRestrictionNetworkPropertiesDTO'
        restrictionmosaic:
          $ref: '#/components/schemas/MosaicRestrictionNetworkPropertiesDTO'
        transfer:
          $ref: '#/components/schemas/TransferNetworkPropertiesDTO'
    PositionEnum:
      type: string
      enum:
        - left
        - right
      description: Position relative to the proofHash being evaluated.
    ProofGamma:
      type: string
      maxLength: 64
      format: hex
      description: 32-bytes VRF proof gamma.
      example: A5E11CB1CC4FDB23D25552D2666B758F7A15C39388AE576007757955E332AD91
    ProofScalar:
      type: string
      maxLength: 64
      format: hex
      description: 32-bytes VRF proof scalar.
      example: E163D16F01F16D24EBF775357E6392C96403343B725FA78A59208A31ABA3520E
    ProofVerificationHash:
      type: string
      maxLength: 32
      format: hex
      description: 16-bytes VRF proof verification hash.
      example: 85DA8704C15870F9AEC80F81FE376D5F
    PublicKey:
      type: string
      maxLength: 64
      format: hex
      description: Public key.
      example: 0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF
    ReceiptTypeEnum:
      type: number
      enum:
        - 4685
        - 4942
        - 8515
        - 8776
        - 9032
        - 8786
        - 9042
        - 12616
        - 12626
        - 16717
        - 16718
        - 16974
        - 20803
        - 57667
        - 61763
        - 62019
      description: |-
        Type of receipt:
        * 0x124D (4685 decimal) - Mosaic_Rental_Fee.
        * 0x134E (4942 decimal) - Namespace_Rental_Fee.
        * 0x2143 (8515 decimal) - Harvest_Fee.
        * 0x2248 (8776 decimal) - LockHash_Completed.
        * 0x2348 (9032 decimal) - LockHash_Expired.
        * 0x2252 (8786 decimal) - LockSecret_Completed.
        * 0x2352 (9042 decimal) - LockSecret_Expired.
        * 0x3148 (12616 decimal) - LockHash_Created.
        * 0x3152 (12626 decimal) - LockSecret_Created.
        * 0x414D (16717 decimal) - Mosaic_Expired.
        * 0x414E (16718 decimal) - Namespace_Expired.
        * 0x424E (16974 decimal) - Namespace_Deleted.
        * 0x5143 (20803 decimal) - Inflation.
        * 0xE143 (57667 decimal) - Transaction_Group.
        * 0xF143 (61763 decimal) - Address_Alias_Resolution.
        * 0xF243 (62019 decimal) - Mosaic_Alias_Resolution.
    RentalFeesDTO:
      type: object
      required:
        - effectiveRootNamespaceRentalFeePerBlock
        - effectiveChildNamespaceRentalFee
        - effectiveMosaicRentalFee
      properties:
        effectiveRootNamespaceRentalFeePerBlock:
          allOf:
            - $ref: '#/components/schemas/Amount'
          description: Estimated effective rental fee to register/extend a namespace per block.
        effectiveChildNamespaceRentalFee:
          allOf:
            - $ref: '#/components/schemas/Amount'
          description: Estimated effective rental fee to create a subnamespace.
        effectiveMosaicRentalFee:
          allOf:
            - $ref: '#/components/schemas/Amount'
          description: Estimated effective rental fee to create a mosaic.
    ResolutionEntryDTO:
      type: object
      required:
        - source
        - resolved
      properties:
        source:
          $ref: '#/components/schemas/SourceDTO'
        resolved:
          anyOf:
            - $ref: '#/components/schemas/Address'
            - $ref: '#/components/schemas/MosaicId'
    ResolutionStatementDTO:
      type: object
      required:
        - height
        - unresolved
        - resolutionEntries
      properties:
        height:
          $ref: '#/components/schemas/Height'
        unresolved:
          anyOf:
            - $ref: '#/components/schemas/UnresolvedMosaicId'
            - $ref: '#/components/schemas/UnresolvedAddress'
        resolutionEntries:
          type: array
          items:
            $ref: '#/components/schemas/ResolutionEntryDTO'
          description: |-
            Array of resolution entries linked to the unresolved namespaceId.
            It is an array instead of a single resolution entry since
            within one block the resolution might change for different sources due to alias related transactions.
    ResolutionStatementInfoDTO:
      type: object
      required:
        - id
        - meta
        - statement
      properties:
        id:
          $ref: '#/components/schemas/ID'
        meta:
          $ref: '#/components/schemas/StatementMetaDTO'
        statement:
          $ref: '#/components/schemas/ResolutionStatementDTO'
      description: |-
        A resolution statement keeps the relation between a namespace alias used in a transaction
        and the real address or mosaicId.
    ResolutionStatementPage:
      type: object
      required:
        - data
        - pagination
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/ResolutionStatementInfoDTO'
        pagination:
          $ref: '#/components/schemas/Pagination'
    RestrictionKey:
      type: string
      format: hex
      description: Restriction key.
      example: 0A1B2C3D4E5F6789
    RestrictionValue:
      type: string
      description: Restriction value.
      example: '1'
    RolesTypeEnum:
      type: integer
      description: |-
        A number that defines the different roles the node provides. Possible roles are:
        * 1 - Peer node.
        * 2 - Api node.
        * 4 - Voting node.
        * 64 - IPv4 compatible node
        * 128 - IPv6 compatible node.

        The values are bitwise added together, Examples:
        1 = Just Peer.
        2 = Just Api.
        3 = Peer and Api node.
        7 = Peer, Api and Voting node.
        65 = IPv4 and Peer node.
      example: 3
    Score:
      type: string
      description: |-
        Score of the blockchain. During synchronization, nodes try to get the
        blockchain with highest score in the network.
      example: '1'
    Secret:
      type: string
      maxLength: 64
      format: hex
      description: Secret.
      example: 0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF
    SecretLockEntryDTO:
      type: object
      required:
        - version
        - ownerAddress
        - mosaicId
        - amount
        - endHeight
        - status
        - hashAlgorithm
        - secret
        - recipientAddress
        - compositeHash
      properties:
        version:
          $ref: '#/components/schemas/StateVersion'
        ownerAddress:
          $ref: '#/components/schemas/Address'
        mosaicId:
          $ref: '#/components/schemas/MosaicId'
        amount:
          $ref: '#/components/schemas/Amount'
        endHeight:
          $ref: '#/components/schemas/Height'
        status:
          $ref: '#/components/schemas/LockStatus'
        hashAlgorithm:
          $ref: '#/components/schemas/LockHashAlgorithmEnum'
        secret:
          $ref: '#/components/schemas/Secret'
        recipientAddress:
          $ref: '#/components/schemas/Address'
        compositeHash:
          $ref: '#/components/schemas/Hash256'
    SecretLockInfoDTO:
      type: object
      required:
        - id
        - lock
      properties:
        id:
          allOf:
            - $ref: '#/components/schemas/ID'
          example: 65204AB4242726662686A453
        lock:
          $ref: '#/components/schemas/SecretLockEntryDTO'
    SecretLockNetworkPropertiesDTO:
      type: object
      properties:
        maxSecretLockDuration:
          type: string
          description: Maximum number of blocks for which a secret lock can exist.
          example: 30d
        minProofSize:
          type: string
          description: Minimum size of a proof in bytes.
          example: '1'
        maxProofSize:
          type: string
          description: Maximum size of a proof in bytes.
          example: '1024'
    SecretLockPage:
      type: object
      required:
        - data
        - pagination
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/SecretLockInfoDTO'
        pagination:
          $ref: '#/components/schemas/Pagination'
    SecretLockTransactionDTO:
      type: object
      required:
        - size
        - signature
        - signerPublicKey
        - version
        - network
        - type
        - maxFee
        - deadline
        - recipientAddress
        - secret
        - mosaicId
        - amount
        - duration
        - hashAlgorithm
      properties:
        size:
          allOf:
            - $ref: '#/components/schemas/UInt32'
          description: Entity size in bytes.
        signature:
          $ref: '#/components/schemas/Signature'
        signerPublicKey:
          $ref: '#/components/schemas/PublicKey'
        version:
          type: integer
          description: Entity version.
          example: 1
        network:
          $ref: '#/components/schemas/NetworkTypeEnum'
        type:
          type: integer
          example: 32835
        maxFee:
          $ref: '#/components/schemas/Amount'
        deadline:
          $ref: '#/components/schemas/BlockDuration'
        recipientAddress:
          $ref: '#/components/schemas/UnresolvedAddress'
        secret:
          $ref: '#/components/schemas/Hash256'
        mosaicId:
          $ref: '#/components/schemas/UnresolvedMosaicId'
        amount:
          $ref: '#/components/schemas/Amount'
        duration:
          $ref: '#/components/schemas/BlockDuration'
        hashAlgorithm:
          $ref: '#/components/schemas/LockHashAlgorithmEnum'
      description: Transaction to sends mosaics to a recipient if the proof used is revealed. If the duration is reached, the locked funds go back to the sender of the transaction.
    SecretProofTransactionDTO:
      type: object
      required:
        - size
        - signature
        - signerPublicKey
        - version
        - network
        - type
        - maxFee
        - deadline
        - recipientAddress
        - secret
        - hashAlgorithm
        - proof
      properties:
        size:
          allOf:
            - $ref: '#/components/schemas/UInt32'
          description: Entity size in bytes.
        signature:
          $ref: '#/components/schemas/Signature'
        signerPublicKey:
          $ref: '#/components/schemas/PublicKey'
        version:
          type: integer
          description: Entity version.
          example: 1
        network:
          $ref: '#/components/schemas/NetworkTypeEnum'
        type:
          type: integer
          example: 32835
        maxFee:
          $ref: '#/components/schemas/Amount'
        deadline:
          $ref: '#/components/schemas/BlockDuration'
        recipientAddress:
          $ref: '#/components/schemas/UnresolvedAddress'
        secret:
          $ref: '#/components/schemas/Hash256'
        hashAlgorithm:
          $ref: '#/components/schemas/LockHashAlgorithmEnum'
        proof:
          type: string
          description: Original random set of bytes.
      description: Transaction to reveal a proof.
    ServerDTO:
      type: object
      required:
        - restVersion
        - sdkVersion
        - deployment
      properties:
        restVersion:
          type: string
          description: catapult-rest component version.
          example: 2.4.4
        sdkVersion:
          type: string
          description: catapult-sdk component version.
          example: ''
        deployment:
          $ref: '#/components/schemas/DeploymentDTO'
    ServerInfoDTO:
      type: object
      required:
        - serverInfo
      properties:
        serverInfo:
          $ref: '#/components/schemas/ServerDTO'
    Signature:
      type: string
      description: Entity's signature generated by the signer.
      example: 0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF
    SourceDTO:
      type: object
      required:
        - primaryId
        - secondaryId
      properties:
        primaryId:
          allOf:
            - $ref: '#/components/schemas/UInt32'
          description: Transaction index within the block.
        secondaryId:
          allOf:
            - $ref: '#/components/schemas/UInt32'
          description: |-
            Transaction index within the aggregate transaction.
            If the transaction is not an embedded transaction, then the secondary id is set to 0.
      description: Transaction that triggered the receipt.
    StageEnum:
      type: number
      enum:
        - 0
        - 1
        - 2
      description: |-
        Type of stage:
        * 0 - Prevote.
        * 1 - Precommit.
        * 2 - Count.
    StateVersion:
      type: integer
      description: The version of the state
      example: 1
    StatementMetaDTO:
      type: object
      required:
        - timestamp
      properties:
        timestamp:
          $ref: '#/components/schemas/Timestamp'
      description: Metadata related to the statment, including block information.
    StorageInfoDTO:
      type: object
      required:
        - numBlocks
        - numTransactions
        - numAccounts
        - database
      properties:
        numBlocks:
          type: integer
          description: Number of blocks stored.
        numTransactions:
          type: integer
          description: Number of transactions stored.
        numAccounts:
          type: integer
          description: Number of accounts created.
        database:
          $ref: '#/components/schemas/DatabaseDTO'
    SupplementalPublicKeysDTO:
      type: object
      properties:
        linked:
          $ref: '#/components/schemas/AccountLinkPublicKeyDTO'
        node:
          $ref: '#/components/schemas/AccountLinkPublicKeyDTO'
        vrf:
          $ref: '#/components/schemas/AccountLinkPublicKeyDTO'
        voting:
          $ref: '#/components/schemas/AccountLinkVotingKeysDTO'
    Timestamp:
      type: string
      description: Number of milliseconds elapsed since the creation of the nemesis block. This value can be converted to epoch time by adding the network's 'epochAdjustment'.
      example: '0'
    TransactionFeesDTO:
      type: object
      required:
        - averageFeeMultiplier
        - medianFeeMultiplier
        - highestFeeMultiplier
        - lowestFeeMultiplier
        - minFeeMultiplier
      properties:
        averageFeeMultiplier:
          allOf:
            - $ref: '#/components/schemas/BlockFeeMultiplier'
          description: Average fee multiplier over the last "numBlocksTransactionFeeStats" on the current Network.
        medianFeeMultiplier:
          allOf:
            - $ref: '#/components/schemas/BlockFeeMultiplier'
          description: Median fee multiplier over the last "numBlocksTransactionFeeStats" on the current Network.
        highestFeeMultiplier:
          allOf:
            - $ref: '#/components/schemas/BlockFeeMultiplier'
          description: Highest fee multiplier over the last "numBlocksTransactionFeeStats" on the current Network.
        lowestFeeMultiplier:
          allOf:
            - $ref: '#/components/schemas/BlockFeeMultiplier'
          description: Lowest fee multiplier over the last "numBlocksTransactionFeeStats" on the current Network.
        minFeeMultiplier:
          allOf:
            - $ref: '#/components/schemas/BlockFeeMultiplier'
          description: Minimal fee multiplier on the current connected Node.
    TransactionGroupEnum:
      type: string
      enum:
        - unconfirmed
        - confirmed
        - failed
        - partial
      description: |-
        A transaction could be classified in the following groups:
        * Unconfirmed: The transaction reached the P2P network.
        At this point, it is not guaranteed that the transaction will be included in a block.
        * Confirmed: The transaction is included in a block.
        * Partial: The transaction requires to be cosigned by other transaction participants in order to be included in a block.
        * Failed: The transaction did not pass the network validation, and it was rejected.
    TransactionInfoDTO:
      type: object
      required:
        - id
        - meta
        - transaction
      properties:
        id:
          $ref: '#/components/schemas/ID'
        meta:
          anyOf:
            - $ref: '#/components/schemas/TransactionMetaDTO'
            - $ref: '#/components/schemas/EmbeddedTransactionMetaDTO'
        transaction:
          anyOf:
            - $ref: '#/components/schemas/AccountKeyLinkTransactionDTO'
            - $ref: '#/components/schemas/EmbeddedAccountKeyLinkTransactionDTO'
            - $ref: '#/components/schemas/NodeKeyLinkTransactionDTO'
            - $ref: '#/components/schemas/EmbeddedNodeKeyLinkTransactionDTO'
            - $ref: '#/components/schemas/VrfKeyLinkTransactionDTO'
            - $ref: '#/components/schemas/EmbeddedVrfKeyLinkTransactionDTO'
            - $ref: '#/components/schemas/VotingKeyLinkTransactionDTO'
            - $ref: '#/components/schemas/EmbeddedVotingKeyLinkTransactionDTO'
            - $ref: '#/components/schemas/AggregateTransactionDTO'
            - $ref: '#/components/schemas/AggregateTransactionExtendedDTO'
            - $ref: '#/components/schemas/HashLockTransactionDTO'
            - $ref: '#/components/schemas/EmbeddedHashLockTransactionDTO'
            - $ref: '#/components/schemas/SecretLockTransactionDTO'
            - $ref: '#/components/schemas/EmbeddedSecretLockTransactionDTO'
            - $ref: '#/components/schemas/SecretProofTransactionDTO'
            - $ref: '#/components/schemas/EmbeddedSecretProofTransactionDTO'
            - $ref: '#/components/schemas/AccountMetadataTransactionDTO'
            - $ref: '#/components/schemas/EmbeddedAccountMetadataTransactionDTO'
            - $ref: '#/components/schemas/MosaicMetadataTransactionDTO'
            - $ref: '#/components/schemas/EmbeddedMosaicMetadataTransactionDTO'
            - $ref: '#/components/schemas/NamespaceMetadataTransactionDTO'
            - $ref: '#/components/schemas/EmbeddedNamespaceMetadataTransactionDTO'
            - $ref: '#/components/schemas/MosaicDefinitionTransactionDTO'
            - $ref: '#/components/schemas/EmbeddedMosaicDefinitionTransactionDTO'
            - $ref: '#/components/schemas/MosaicSupplyChangeTransactionDTO'
            - $ref: '#/components/schemas/EmbeddedMosaicSupplyChangeTransactionDTO'
            - $ref: '#/components/schemas/MosaicSupplyRevocationTransactionDTO'
            - $ref: '#/components/schemas/EmbeddedMosaicSupplyRevocationTransactionDTO'
            - $ref: '#/components/schemas/NamespaceRegistrationTransactionDTO'
            - $ref: '#/components/schemas/EmbeddedNamespaceRegistrationTransactionDTO'
            - $ref: '#/components/schemas/AddressAliasTransactionDTO'
            - $ref: '#/components/schemas/EmbeddedAddressAliasTransactionDTO'
            - $ref: '#/components/schemas/MosaicAliasTransactionDTO'
            - $ref: '#/components/schemas/EmbeddedMosaicAliasTransactionDTO'
            - $ref: '#/components/schemas/MultisigAccountModificationTransactionDTO'
            - $ref: '#/components/schemas/EmbeddedMultisigAccountModificationTransactionDTO'
            - $ref: '#/components/schemas/AccountAddressRestrictionTransactionDTO'
            - $ref: '#/components/schemas/EmbeddedAccountAddressRestrictionTransactionDTO'
            - $ref: '#/components/schemas/AccountMosaicRestrictionTransactionDTO'
            - $ref: '#/components/schemas/EmbeddedAccountMosaicRestrictionTransactionDTO'
            - $ref: '#/components/schemas/AccountOperationRestrictionTransactionDTO'
            - $ref: '#/components/schemas/EmbeddedAccountOperationRestrictionTransactionDTO'
            - $ref: '#/components/schemas/MosaicGlobalRestrictionTransactionDTO'
            - $ref: '#/components/schemas/EmbeddedMosaicGlobalRestrictionTransactionDTO'
            - $ref: '#/components/schemas/MosaicAddressRestrictionTransactionDTO'
            - $ref: '#/components/schemas/EmbeddedMosaicAddressRestrictionTransactionDTO'
            - $ref: '#/components/schemas/TransferTransactionDTO'
            - $ref: '#/components/schemas/EmbeddedTransferTransactionDTO'
    TransactionMetaDTO:
      type: object
      required:
        - height
        - hash
        - merkleComponentHash
        - index
      properties:
        height:
          $ref: '#/components/schemas/Height'
        hash:
          $ref: '#/components/schemas/Hash256'
        merkleComponentHash:
          $ref: '#/components/schemas/Hash256'
        index:
          type: integer
          description: Transaction index within the block.
        timestamp:
          $ref: '#/components/schemas/Timestamp'
        feeMultiplier:
          $ref: '#/components/schemas/BlockFeeMultiplier'
    TransactionPage:
      type: object
      required:
        - data
        - pagination
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/TransactionInfoDTO'
        pagination:
          $ref: '#/components/schemas/Pagination'
    TransactionStatementDTO:
      type: object
      required:
        - height
        - source
        - receipts
      properties:
        height:
          $ref: '#/components/schemas/Height'
        source:
          $ref: '#/components/schemas/SourceDTO'
        receipts:
          type: array
          items:
            anyOf:
              - $ref: '#/components/schemas/BalanceTransferReceiptDTO'
              - $ref: '#/components/schemas/BalanceChangeReceiptDTO'
              - $ref: '#/components/schemas/NamespaceExpiryReceiptDTO'
              - $ref: '#/components/schemas/MosaicExpiryReceiptDTO'
              - $ref: '#/components/schemas/InflationReceiptDTO'
          description: Array of receipts.
    TransactionStatementInfoDTO:
      type: object
      required:
        - id
        - meta
        - statement
      properties:
        id:
          $ref: '#/components/schemas/ID'
        meta:
          $ref: '#/components/schemas/StatementMetaDTO'
        statement:
          $ref: '#/components/schemas/TransactionStatementDTO'
      description: Collection of receipts related to a transaction.
    TransactionStatementPage:
      type: object
      required:
        - data
        - pagination
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/TransactionStatementInfoDTO'
        pagination:
          $ref: '#/components/schemas/Pagination'
    TransactionStatusDTO:
      type: object
      required:
        - group
        - hash
        - deadline
      properties:
        group:
          $ref: '#/components/schemas/TransactionGroupEnum'
        code:
          $ref: '#/components/schemas/TransactionStatusEnum'
        hash:
          $ref: '#/components/schemas/Hash256'
        deadline:
          $ref: '#/components/schemas/BlockDuration'
        height:
          $ref: '#/components/schemas/Height'
    TransactionStatusEnum:
      type: string
      enum:
        - Success
        - Neutral
        - Failure
        - Failure_Core_Past_Deadline
        - Failure_Core_Future_Deadline
        - Failure_Core_Insufficient_Balance
        - Failure_Core_Too_Many_Transactions
        - Failure_Core_Nemesis_Account_Signed_After_Nemesis_Block
        - Failure_Core_Wrong_Network
        - Failure_Core_Invalid_Address
        - Failure_Core_Invalid_Version
        - Failure_Core_Invalid_Transaction_Fee
        - Failure_Core_Block_Harvester_Ineligible
        - Failure_Core_Zero_Address
        - Failure_Core_Zero_Public_Key
        - Failure_Core_Nonzero_Internal_Padding
        - Failure_Core_Address_Collision
        - Failure_Core_Importance_Block_Mismatch
        - Failure_Core_Unexpected_Block_Type
        - Failure_Core_Block_Explicit_Transactions_Hash_Mismatch
        - Failure_Core_Invalid_Link_Action
        - Failure_Core_Link_Already_Exists
        - Failure_Core_Inconsistent_Unlink_Data
        - Failure_Core_Invalid_Link_Range
        - Failure_Core_Too_Many_Links
        - Failure_Core_Link_Start_Epoch_Invalid
        - Failure_Hash_Already_Exists
        - Failure_Signature_Not_Verifiable
        - Failure_AccountLink_Link_Already_Exists
        - Failure_AccountLink_Inconsistent_Unlink_Data
        - Failure_AccountLink_Unknown_Link
        - Failure_AccountLink_Remote_Account_Ineligible
        - Failure_AccountLink_Remote_Account_Signer_Prohibited
        - Failure_AccountLink_Remote_Account_Participant_Prohibited
        - Failure_Aggregate_Too_Many_Transactions
        - Failure_Aggregate_No_Transactions
        - Failure_Aggregate_Too_Many_Cosignatures
        - Failure_Aggregate_Redundant_Cosignatures
        - Failure_Aggregate_Ineligible_Cosignatories
        - Failure_Aggregate_Missing_Cosignatures
        - Failure_Aggregate_Transactions_Hash_Mismatch
        - Failure_LockHash_Invalid_Mosaic_Id
        - Failure_LockHash_Invalid_Mosaic_Amount
        - Failure_LockHash_Hash_Already_Exists
        - Failure_LockHash_Unknown_Hash
        - Failure_LockHash_Inactive_Hash
        - Failure_LockHash_Invalid_Duration
        - Failure_LockSecret_Invalid_Hash_Algorithm
        - Failure_LockSecret_Hash_Already_Exists
        - Failure_LockSecret_Proof_Size_Out_Of_Bounds
        - Failure_LockSecret_Secret_Mismatch
        - Failure_LockSecret_Unknown_Composite_Key
        - Failure_LockSecret_Inactive_Secret
        - Failure_LockSecret_Hash_Algorithm_Mismatch
        - Failure_LockSecret_Invalid_Duration
        - Failure_Metadata_Value_Too_Small
        - Failure_Metadata_Value_Too_Large
        - Failure_Metadata_Value_Size_Delta_Too_Large
        - Failure_Metadata_Value_Size_Delta_Mismatch
        - Failure_Metadata_Value_Change_Irreversible
        - Failure_Mosaic_Invalid_Duration
        - Failure_Mosaic_Invalid_Name
        - Failure_Mosaic_Name_Id_Mismatch
        - Failure_Mosaic_Expired
        - Failure_Mosaic_Owner_Conflict
        - Failure_Mosaic_Id_Mismatch
        - Failure_Mosaic_Parent_Id_Conflict
        - Failure_Mosaic_Invalid_Property
        - Failure_Mosaic_Invalid_Flags
        - Failure_Mosaic_Invalid_Divisibility
        - Failure_Mosaic_Invalid_Supply_Change_Action
        - Failure_Mosaic_Invalid_Supply_Change_Amount
        - Failure_Mosaic_Invalid_Id
        - Failure_Mosaic_Modification_Disallowed
        - Failure_Mosaic_Modification_No_Changes
        - Failure_Mosaic_Supply_Immutable
        - Failure_Mosaic_Supply_Negative
        - Failure_Mosaic_Supply_Exceeded
        - Failure_Mosaic_Non_Transferable
        - Failure_Mosaic_Max_Mosaics_Exceeded
        - Failure_Mosaic_Required_Property_Flag_Unset
        - Failure_Multisig_Account_In_Both_Sets
        - Failure_Multisig_Multiple_Deletes
        - Failure_Multisig_Redundant_Modification
        - Failure_Multisig_Unknown_Multisig_Account
        - Failure_Multisig_Not_A_Cosignatory
        - Failure_Multisig_Already_A_Cosignatory
        - Failure_Multisig_Min_Setting_Out_Of_Range
        - Failure_Multisig_Min_Setting_Larger_Than_Num_Cosignatories
        - Failure_Multisig_Invalid_Modification_Action
        - Failure_Multisig_Max_Cosigned_Accounts
        - Failure_Multisig_Max_Cosignatories
        - Failure_Multisig_Loop
        - Failure_Multisig_Max_Multisig_Depth
        - Failure_Multisig_Operation_Prohibited_By_Account
        - Failure_Namespace_Invalid_Duration
        - Failure_Namespace_Invalid_Name
        - Failure_Namespace_Name_Id_Mismatch
        - Failure_Namespace_Expired
        - Failure_Namespace_Owner_Conflict
        - Failure_Namespace_Id_Mismatch
        - Failure_Namespace_Invalid_Registration_Type
        - Failure_Namespace_Root_Name_Reserved
        - Failure_Namespace_Too_Deep
        - Failure_Namespace_Unknown_Parent
        - Failure_Namespace_Already_Exists
        - Failure_Namespace_Already_Active
        - Failure_Namespace_Eternal_After_Nemesis_Block
        - Failure_Namespace_Max_Children_Exceeded
        - Failure_Namespace_Alias_Invalid_Action
        - Failure_Namespace_Unknown
        - Failure_Namespace_Alias_Already_Exists
        - Failure_Namespace_Unknown_Alias
        - Failure_Namespace_Alias_Inconsistent_Unlink_Type
        - Failure_Namespace_Alias_Inconsistent_Unlink_Data
        - Failure_Namespace_Alias_Invalid_Address
        - Failure_RestrictionAccount_Invalid_Restriction_Flags
        - Failure_RestrictionAccount_Invalid_Modification_Action
        - Failure_RestrictionAccount_Invalid_Modification_Address
        - Failure_RestrictionAccount_Modification_Operation_Type_Incompatible
        - Failure_RestrictionAccount_Redundant_Modification
        - Failure_RestrictionAccount_Invalid_Modification
        - Failure_RestrictionAccount_Modification_Count_Exceeded
        - Failure_RestrictionAccount_No_Modifications
        - Failure_RestrictionAccount_Values_Count_Exceeded
        - Failure_RestrictionAccount_Invalid_Value
        - Failure_RestrictionAccount_Address_Interaction_Prohibited
        - Failure_RestrictionAccount_Mosaic_Transfer_Prohibited
        - Failure_RestrictionAccount_Operation_Type_Prohibited
        - Failure_RestrictionMosaic_Invalid_Restriction_Type
        - Failure_RestrictionMosaic_Previous_Value_Mismatch
        - Failure_RestrictionMosaic_Previous_Value_Must_Be_Zero
        - Failure_RestrictionMosaic_Max_Restrictions_Exceeded
        - Failure_RestrictionMosaic_Cannot_Delete_Nonexistent_Restriction
        - Failure_RestrictionMosaic_Unknown_Global_Restriction
        - Failure_RestrictionMosaic_Invalid_Global_Restriction
        - Failure_RestrictionMosaic_Account_Unauthorized
        - Failure_Transfer_Message_Too_Large
        - Failure_Transfer_Out_Of_Order_Mosaics
        - Failure_Chain_Unlinked
        - Failure_Chain_Block_Not_Hit
        - Failure_Chain_Block_Inconsistent_State_Hash
        - Failure_Chain_Block_Inconsistent_Receipts_Hash
        - Failure_Chain_Block_Invalid_Vrf_Proof
        - Failure_Chain_Block_Unknown_Signer
        - Failure_Chain_Unconfirmed_Cache_Too_Full
        - Failure_Consumer_Empty_Input
        - Failure_Consumer_Block_Transactions_Hash_Mismatch
        - Neutral_Consumer_Hash_In_Recency_Cache
        - Failure_Consumer_Remote_Chain_Too_Many_Blocks
        - Failure_Consumer_Remote_Chain_Improper_Link
        - Failure_Consumer_Remote_Chain_Duplicate_Transactions
        - Failure_Consumer_Remote_Chain_Unlinked
        - Failure_Consumer_Remote_Chain_Difficulties_Mismatch
        - Failure_Consumer_Remote_Chain_Score_Not_Better
        - Failure_Consumer_Remote_Chain_Too_Far_Behind
        - Failure_Consumer_Remote_Chain_Too_Far_In_Future
        - Failure_Consumer_Batch_Signature_Not_Verifiable
        - Failure_Consumer_Remote_Chain_Improper_Importance_Link
        - Failure_Extension_Partial_Transaction_Cache_Prune
        - Failure_Extension_Partial_Transaction_Dependency_Removed
        - Failure_Extension_Read_Rate_Limit_Exceeded
      description: |-
        List of status errors that can be returned via the status channel after announcing a transaction:
        * Success
        * Neutral
        * Failure
        * Failure_Core_Past_Deadline - Validation failed because the deadline passed.
        * Failure_Core_Future_Deadline - Validation failed because the deadline is too far in the future.
        * Failure_Core_Insufficient_Balance - Validation failed because the account has an insufficient balance.
        * Failure_Core_Too_Many_Transactions - Validation failed because there are too many transactions in a block.
        * Failure_Core_Nemesis_Account_Signed_After_Nemesis_Block - Validation failed because an entity originated from the nemesis
        account after the nemesis block.
        * Failure_Core_Wrong_Network - Validation failed because the entity has the wrong network specified.
        * Failure_Core_Invalid_Address - Validation failed because an address is invalid.
        * Failure_Core_Invalid_Version - Validation failed because entity version is invalid.
        * Failure_Core_Invalid_Transaction_Fee - Validation failed because a transaction fee is invalid.
        * Failure_Core_Block_Harvester_Ineligible - Validation failed because a block was harvested by an ineligible harvester.
        * Failure_Core_Zero_Address - Validation failed because an address is zero.
        * Failure_Core_Zero_Public_Key - Validation failed because a public key is zero.
        * Failure_Core_Nonzero_Internal_Padding - Validation failed because internal padding is nonzero.
        * Failure_Core_Address_Collision - Validation failed because an address collision is detected.
        * Failure_Core_Importance_Block_Mismatch - Validation failed because the block does not match the schema of an importance block.
        * Failure_Core_Unexpected_Block_Type - Validation failed because the block type is unexpected.
        * Failure_Core_Block_Explicit_Transactions_Hash_Mismatch - Validation failed because a block did not have the expected
        transactions hash at a specified height.
        * Failure_Core_Invalid_Link_Action - Validation failed because link action is invalid.
        * Failure_Core_Link_Already_Exists - Validation failed because main account is already linked to another account.
        * Failure_Core_Inconsistent_Unlink_Data - Validation failed because unlink data is not consistent with existing account link.
        * Failure_Core_Invalid_Link_Range - Validation failed because link range is invalid.
        * Failure_Core_Too_Many_Links - Validation failed because main account has too many links of the specified type.
        * Failure_Core_Link_Start_Epoch_Invalid - Validation failed because the start epoch is invalid.
        * Failure_Hash_Already_Exists
        * Failure_Signature_Not_Verifiable - Validation failed because the verification of the signature failed.
        * Failure_AccountLink_Link_Already_Exists - Validation failed because main account is already linked to another account.
        * Failure_AccountLink_Inconsistent_Unlink_Data - Validation failed because unlink data is not consistent with existing account link.
        * Failure_AccountLink_Unknown_Link - Validation failed because main account is not linked to another account.
        * Failure_AccountLink_Remote_Account_Ineligible - Validation failed because link is attempting to convert ineligible
        account to remote.
        * Failure_AccountLink_Remote_Account_Signer_Prohibited - Validation failed because remote is not allowed to sign a transaction.
        * Failure_AccountLink_Remote_Account_Participant_Prohibited - Validation failed because remote is not allowed to participate
        in the transaction.
        * Failure_Aggregate_Too_Many_Transactions - Validation failed because aggregate has too many transactions.
        * Failure_Aggregate_No_Transactions - Validation failed because aggregate does not have any transactions.
        * Failure_Aggregate_Too_Many_Cosignatures - Validation failed because aggregate has too many cosignatures.
        * Failure_Aggregate_Redundant_Cosignatures - Validation failed because redundant cosignatures are present.
        * Failure_Aggregate_Ineligible_Cosignatories - Validation failed because at least one cosignatory is ineligible.
        * Failure_Aggregate_Missing_Cosignatures - Validation failed because at least one required cosignature is missing.
        * Failure_Aggregate_Transactions_Hash_Mismatch - Validation failed because the aggregate transactions hash does not
        match the calculated value.
        * Failure_LockHash_Invalid_Mosaic_Id - Validation failed because lock does not allow the specified mosaic.
        * Failure_LockHash_Invalid_Mosaic_Amount - Validation failed because lock does not allow the specified amount.
        * Failure_LockHash_Hash_Already_Exists - Validation failed because hash is already present in cache.
        * Failure_LockHash_Unknown_Hash - Validation failed because hash is not present in cache.
        * Failure_LockHash_Inactive_Hash - Validation failed because hash is inactive.
        * Failure_LockHash_Invalid_Duration - Validation failed because duration is too long.
        * Failure_LockSecret_Invalid_Hash_Algorithm - Validation failed because hash algorithm for lock type secret is invalid.
        * Failure_LockSecret_Hash_Already_Exists - Validation failed because hash is already present in cache.
        * Failure_LockSecret_Proof_Size_Out_Of_Bounds - Validation failed because proof is too small or too large.
        * Failure_LockSecret_Secret_Mismatch - Validation failed because secret does not match proof.
        * Failure_LockSecret_Unknown_Composite_Key - Validation failed because composite key is unknown.
        * Failure_LockSecret_Inactive_Secret - Validation failed because secret is inactive.
        * Failure_LockSecret_Hash_Algorithm_Mismatch - Validation failed because hash algorithm does not match.
        * Failure_LockSecret_Invalid_Duration - Validation failed because duration is too long.
        * Failure_Metadata_Value_Too_Small - Validation failed because the metadata value is too small.
        * Failure_Metadata_Value_Too_Large - Validation failed because the metadata value is too large.
        * Failure_Metadata_Value_Size_Delta_Too_Large - Validation failed because the metadata value size delta is larger in magnitude
        than the value size.
        * Failure_Metadata_Value_Size_Delta_Mismatch - Validation failed because the metadata value size delta does not match expected
        value based on the current state.
        * Failure_Metadata_Value_Change_Irreversible - Validation failed because a metadata value change (truncation) is irreversible.
        * Failure_Mosaic_Invalid_Duration - Validation failed because the duration has an invalid value.
        * Failure_Mosaic_Invalid_Name - Validation failed because the name is invalid.
        * Failure_Mosaic_Name_Id_Mismatch - Validation failed because the name and id don't match.
        * Failure_Mosaic_Expired - Validation failed because the parent is expired.
        * Failure_Mosaic_Owner_Conflict - Validation failed because the parent owner conflicts with the child owner.
        * Failure_Mosaic_Id_Mismatch - Validation failed because the id is not the expected id generated from signer and nonce.
        * Failure_Mosaic_Parent_Id_Conflict - Validation failed because the existing parent id does not match the supplied parent id.
        * Failure_Mosaic_Invalid_Property - Validation failed because a mosaic property is invalid.
        * Failure_Mosaic_Invalid_Flags - Validation failed because the mosaic flags are invalid.
        * Failure_Mosaic_Invalid_Divisibility - Validation failed because the mosaic divisibility is invalid.
        * Failure_Mosaic_Invalid_Supply_Change_Action - Validation failed because the mosaic supply change action is invalid.
        * Failure_Mosaic_Invalid_Supply_Change_Amount - Validation failed because the mosaic supply change amount is invalid.
        * Failure_Mosaic_Invalid_Id - Validation failed because the mosaic id is invalid.
        * Failure_Mosaic_Modification_Disallowed - Validation failed because mosaic modification is not allowed.
        * Failure_Mosaic_Modification_No_Changes - Validation failed because mosaic modification would not result in any changes.
        * Failure_Mosaic_Supply_Immutable - Validation failed because the mosaic supply is immutable.
        * Failure_Mosaic_Supply_Negative - Validation failed because the resulting mosaic supply is negative.
        * Failure_Mosaic_Supply_Exceeded - Validation failed because the resulting mosaic supply exceeds the maximum allowed value.
        * Failure_Mosaic_Non_Transferable - Validation failed because the mosaic is not transferable.
        * Failure_Mosaic_Max_Mosaics_Exceeded - Validation failed because the credit of the mosaic would exceed the maximum of
        different mosaics an account is allowed to own.
        * Failure_Mosaic_Required_Property_Flag_Unset - Validation failed because the mosaic has at least one required property flag
        unset.
        * Failure_Multisig_Account_In_Both_Sets - Validation failed because account is specified to be both added and removed.
        * Failure_Multisig_Multiple_Deletes - Validation failed because multiple removals are present.
        * Failure_Multisig_Redundant_Modification - Validation failed because a modification is redundant.
        * Failure_Multisig_Unknown_Multisig_Account - Validation failed because account is not in multisig cache.
        * Failure_Multisig_Not_A_Cosignatory - Validation failed because account to be removed is not present.
        * Failure_Multisig_Already_A_Cosignatory - Validation failed because account to be added is already a cosignatory.
        * Failure_Multisig_Min_Setting_Out_Of_Range - Validation failed because new minimum settings are out of range.
        * Failure_Multisig_Min_Setting_Larger_Than_Num_Cosignatories - Validation failed because min settings are larger than number of
        cosignatories.
        * Failure_Multisig_Invalid_Modification_Action - Validation failed because the modification action is invalid.
        * Failure_Multisig_Max_Cosigned_Accounts - Validation failed because the cosignatory already cosigns the maximum number of
        accounts.
        * Failure_Multisig_Max_Cosignatories - Validation failed because the multisig account already has the maximum number of
        cosignatories.
        * Failure_Multisig_Loop - Validation failed because a multisig loop is created.
        * Failure_Multisig_Max_Multisig_Depth - Validation failed because the max multisig depth is exceeded.
        * Failure_Multisig_Operation_Prohibited_By_Account - Validation failed because an operation is not permitted by a multisig
        account.
        * Failure_Namespace_Invalid_Duration - Validation failed because the duration has an invalid value.
        * Failure_Namespace_Invalid_Name - Validation failed because the name is invalid.
        * Failure_Namespace_Name_Id_Mismatch - Validation failed because the name and id don't match.
        * Failure_Namespace_Expired - Validation failed because the parent is expired.
        * Failure_Namespace_Owner_Conflict - Validation failed because the parent owner conflicts with the child owner.
        * Failure_Namespace_Id_Mismatch - Validation failed because the id is not the expected id generated from signer and nonce.
        * Failure_Namespace_Invalid_Registration_Type - Validation failed because the namespace registration type is invalid.
        * Failure_Namespace_Root_Name_Reserved - Validation failed because the root namespace has a reserved name.
        * Failure_Namespace_Too_Deep - Validation failed because the resulting namespace would exceed the maximum allowed namespace
        depth.
        * Failure_Namespace_Unknown_Parent - Validation failed because the namespace parent is unknown.
        * Failure_Namespace_Already_Exists - Validation failed because the namespace already exists.
        * Failure_Namespace_Already_Active - Validation failed because the namespace is already active.
        * Failure_Namespace_Eternal_After_Nemesis_Block - Validation failed because an eternal namespace was received after the
        nemesis block.
        * Failure_Namespace_Max_Children_Exceeded - Validation failed because the maximum number of children for a root namespace was
        exceeded.
        * Failure_Namespace_Alias_Invalid_Action - Validation failed because alias action is invalid.
        * Failure_Namespace_Unknown - Validation failed because namespace does not exist.
        * Failure_Namespace_Alias_Already_Exists - Validation failed because namespace is already linked to an alias.
        * Failure_Namespace_Unknown_Alias - Validation failed because namespace is not linked to an alias.
        * Failure_Namespace_Alias_Inconsistent_Unlink_Type - Validation failed because unlink type is not consistent with existing
        alias.
        * Failure_Namespace_Alias_Inconsistent_Unlink_Data - Validation failed because unlink data is not consistent with existing
        alias.
        * Failure_Namespace_Alias_Invalid_Address - Validation failed because aliased address is invalid.
        * Failure_RestrictionAccount_Invalid_Restriction_Flags - Validation failed because the account restriction flags are invalid.
        * Failure_RestrictionAccount_Invalid_Modification_Action - Validation failed because a modification action is invalid.
        * Failure_RestrictionAccount_Invalid_Modification_Address - Validation failed because a modification address is invalid.
        * Failure_RestrictionAccount_Modification_Operation_Type_Incompatible - Validation failed because the operation type is
        incompatible. *Note*: This indicates that the existing restrictions have a different operation type than that specified
        in the notification.
        * Failure_RestrictionAccount_Redundant_Modification - Validation failed because a modification is redundant.
        * Failure_RestrictionAccount_Invalid_Modification - Validation failed because a value is not in the container.
        * Failure_RestrictionAccount_Modification_Count_Exceeded - Validation failed because the transaction has too many modifications.
        * Failure_RestrictionAccount_No_Modifications - Validation failed because the transaction has no modifications.
        * Failure_RestrictionAccount_Values_Count_Exceeded - Validation failed because the resulting account restriction has too many
        values.
        * Failure_RestrictionAccount_Invalid_Value - Validation failed because the account restriction value is invalid.
        * Failure_RestrictionAccount_Address_Interaction_Prohibited - Validation failed because the addresses involved in the
        transaction are not allowed to interact.
        * Failure_RestrictionAccount_Mosaic_Transfer_Prohibited - Validation failed because the mosaic transfer is prohibited by the
        recipient.
        * Failure_RestrictionAccount_Operation_Type_Prohibited - Validation failed because the operation type is not allowed to be
        initiated by the signer.
        * Failure_RestrictionMosaic_Invalid_Restriction_Type - Validation failed because the mosaic restriction type is invalid.
        * Failure_RestrictionMosaic_Previous_Value_Mismatch - Validation failed because specified previous value does not match current
        value.
        * Failure_RestrictionMosaic_Previous_Value_Must_Be_Zero - Validation failed because specified previous value is nonzero.
        * Failure_RestrictionMosaic_Max_Restrictions_Exceeded - Validation failed because the maximum number of restrictions would be
        exceeded.
        * Failure_RestrictionMosaic_Cannot_Delete_Nonexistent_Restriction - Validation failed because nonexistent restriction cannot be
        deleted.
        * Failure_RestrictionMosaic_Unknown_Global_Restriction - Validation failed because required global restriction does not exist.
        * Failure_RestrictionMosaic_Invalid_Global_Restriction - Validation failed because mosaic has invalid global restriction.
        * Failure_RestrictionMosaic_Account_Unauthorized - Validation failed because account lacks proper permissions to move mosaic.
        * Failure_Transfer_Message_Too_Large - Validation failed because the message is too large.
        * Failure_Transfer_Out_Of_Order_Mosaics - Validation failed because mosaics are out of order.
        * Failure_Chain_Unlinked - Validation failed because a block was received that did not link with the existing chain.
        * Failure_Chain_Block_Not_Hit - Validation failed because a block was received that is not a hit.
        * Failure_Chain_Block_Inconsistent_State_Hash - Validation failed because a block was received that has an inconsistent state
        hash.
        * Failure_Chain_Block_Inconsistent_Receipts_Hash - Validation failed because a block was received that has an inconsistent
        receipts hash.
        * Failure_Chain_Block_Invalid_Vrf_Proof - Validation failed because the Vrf proof is invalid.
        * Failure_Chain_Block_Unknown_Signer - Validation failed because the block signer is unknown.
        * Failure_Chain_Unconfirmed_Cache_Too_Full - Validation failed because the unconfirmed cache is too full.
        * Failure_Consumer_Empty_Input - Validation failed because the consumer input is empty.
        * Failure_Consumer_Block_Transactions_Hash_Mismatch - Validation failed because the block transactions hash does not match the
        calculated value.
        * Neutral_Consumer_Hash_In_Recency_Cache - Validation failed because an entity hash is present in the recency cache.
        * Failure_Consumer_Remote_Chain_Too_Many_Blocks - Validation failed because the chain part has too many blocks.
        * Failure_Consumer_Remote_Chain_Improper_Link - Validation failed because the chain is internally improperly linked.
        * Failure_Consumer_Remote_Chain_Duplicate_Transactions - Validation failed because the chain part contains duplicate transactions.
        * Failure_Consumer_Remote_Chain_Unlinked - Validation failed because the chain part does not link to the current chain.
        * Failure_Consumer_Remote_Chain_Difficulties_Mismatch - Validation failed because the remote chain difficulties do not match
        the calculated difficulties.
        * Failure_Consumer_Remote_Chain_Score_Not_Better - Validation failed because the remote chain score is not better.
        * Failure_Consumer_Remote_Chain_Too_Far_Behind - Validation failed because the remote chain is too far behind.
        * Failure_Consumer_Remote_Chain_Too_Far_In_Future - Validation failed because the remote chain timestamp is too far in the future.
        * Failure_Consumer_Batch_Signature_Not_Verifiable - Validation failed because the verification of the signature failed during a
        batch operation.
        * Failure_Consumer_Remote_Chain_Improper_Importance_Link - Validation failed because the remote chain has an improper
        importance link.
        * Failure_Extension_Partial_Transaction_Cache_Prune - Validation failed because the partial transaction was pruned from the
        temporal cache.
        * Failure_Extension_Partial_Transaction_Dependency_Removed - Validation failed because the partial transaction was pruned from
        the temporal cache due to its dependency being removed.
        * Failure_Extension_Read_Rate_Limit_Exceeded - Validation failed because socket read rate limit was exceeded.
    TransactionTypeEnum:
      type: number
      enum:
        - 16716
        - 16963
        - 16707
        - 16972
        - 16705
        - 16961
        - 16717
        - 16973
        - 17229
        - 16718
        - 16974
        - 17230
        - 16708
        - 16964
        - 17220
        - 16725
        - 16712
        - 16722
        - 16978
        - 16720
        - 16976
        - 17232
        - 16721
        - 16977
        - 16724
      description: |-
        Type of transaction:
        * 0x414C (16716 decimal) - AccountKeyLinkTransaction.
        * 0x4243 (16963 decimal) - VrfKeyLinkTransaction.
        * 0x4143 (16707 decimal) - VotingKeyLinkTransaction.
        * 0x424C (16972 decimal) - NodeKeyLinkTransaction.
        * 0x4141 (16705 decimal) - AggregateCompleteTransaction.
        * 0x4241 (16961 decimal) - AggregateBondedTransaction.
        * 0x414D (16717 decimal) - MosaicDefinitionTransaction.
        * 0x424D (16973 decimal) - MosaicSupplyChangeTransaction.
        * 0x434D (17229 decimal) - MosaicSupplyRevocationTransaction.
        * 0x414E (16718 decimal) - NamespaceRegistrationTransaction.
        * 0x424E (16974 decimal) - AddressAliasTransaction.
        * 0x434E (17230 decimal) - MosaicAliasTransaction.
        * 0x4144 (16708 decimal) - AccountMetadataTransaction.
        * 0x4244 (16964 decimal) - MosaicMetadataTransaction.
        * 0x4344 (17220 decimal) - NamespaceMetadataTransaction.
        * 0x4155 (16725 decimal) - MultisigAccountModificationTransaction.
        * 0x4148 (16712 decimal) - HashLockTransaction.
        * 0x4152 (16722 decimal) - SecretLockTransaction.
        * 0x4252 (16978 decimal) - SecretProofTransaction.
        * 0x4150 (16720 decimal) - AccountAddressRestrictionTransaction.
        * 0x4250 (16976 decimal) - AccountMosaicRestrictionTransaction.
        * 0x4350 (17232 decimal) - AccountOperationRestrictionTransaction.
        * 0x4151 (16721 decimal) - MosaicGlobalRestrictionTransaction.
        * 0x4251 (16977 decimal) - MosaicAddressRestrictionTransaction.
        * 0x4154 (16724 decimal) - TransferTransaction.
    TransferNetworkPropertiesDTO:
      type: object
      properties:
        maxMessageSize:
          type: string
          description: Maximum transaction message size.
          example: '1024'
    TransferTransactionDTO:
      type: object
      required:
        - size
        - signature
        - signerPublicKey
        - version
        - network
        - type
        - maxFee
        - deadline
        - recipientAddress
        - mosaics
      properties:
        size:
          allOf:
            - $ref: '#/components/schemas/UInt32'
          description: Entity size in bytes.
        signature:
          $ref: '#/components/schemas/Signature'
        signerPublicKey:
          $ref: '#/components/schemas/PublicKey'
        version:
          type: integer
          description: Entity version.
          example: 1
        network:
          $ref: '#/components/schemas/NetworkTypeEnum'
        type:
          type: integer
          example: 32835
        maxFee:
          $ref: '#/components/schemas/Amount'
        deadline:
          $ref: '#/components/schemas/BlockDuration'
        recipientAddress:
          $ref: '#/components/schemas/UnresolvedAddress'
        mosaics:
          type: array
          items:
            $ref: '#/components/schemas/UnresolvedMosaic'
          description: Array of mosaics sent to the recipient.
        message:
          type: string
          description: Transfer transaction message
      description: Transaction to transfer mosaics and a message to another account.
    UInt32:
      type: integer
      format: int64
      description: A number that allows uint 32 values.
      example: 1
    UInt64:
      type: string
      description: A number that allows uint 64 values represented with a string.
      example: '12345'
    UnlockedAccountDTO:
      type: object
      required:
        - unlockedAccount
      properties:
        unlockedAccount:
          type: array
          items:
            $ref: '#/components/schemas/PublicKey'
    UnresolvedAddress:
      type: string
      description: |-
        Address expressed in Base32 format. If the bit 0 of byte 0 is not set (like in 0x90), then it is a
        regular address. Example: TAOXUJOTTW3W5XTBQMQEX3SQNA6MCUVGXLXR3TA.
        Otherwise (e.g. 0x91) it represents a namespace id which starts at byte 1. Example: THBIMC3THGH5RUYAAAAAAAAAAAAAAAAAAAAAAAA
      example: TAOXUJOTTW3W5XTBQMQEX3SQNA6MCUVGXLXR3TA
    UnresolvedMosaic:
      type: object
      required:
        - id
        - amount
      properties:
        id:
          $ref: '#/components/schemas/UnresolvedMosaicId'
        amount:
          $ref: '#/components/schemas/Amount'
    UnresolvedMosaicId:
      type: string
      format: hex
      description: |-
        Mosaic identifier. If the most significant bit of byte 0 is set, a namespaceId (alias)
        is used instead of the real mosaic identifier.
      example: 85BBEA6CC462B244
    VotingKey:
      type: string
      maxLength: 64
      format: hex
      description: 32 bytes voting public key.
      example: 0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF
    VotingKeyLinkTransactionDTO:
      type: object
      required:
        - size
        - signature
        - signerPublicKey
        - version
        - network
        - type
        - maxFee
        - deadline
        - linkedPublicKey
        - startEpoch
        - endEpoch
        - linkAction
      properties:
        size:
          allOf:
            - $ref: '#/components/schemas/UInt32'
          description: Entity size in bytes.
        signature:
          $ref: '#/components/schemas/Signature'
        signerPublicKey:
          $ref: '#/components/schemas/PublicKey'
        version:
          type: integer
          description: Entity version.
          example: 1
        network:
          $ref: '#/components/schemas/NetworkTypeEnum'
        type:
          type: integer
          example: 32835
        maxFee:
          $ref: '#/components/schemas/Amount'
        deadline:
          $ref: '#/components/schemas/BlockDuration'
        linkedPublicKey:
          $ref: '#/components/schemas/VotingKey'
        startEpoch:
          $ref: '#/components/schemas/FinalizationEpoch'
        endEpoch:
          $ref: '#/components/schemas/FinalizationEpoch'
        linkAction:
          $ref: '#/components/schemas/LinkActionEnum'
      description: |-
        Transaction to associate a BLS public key with an account.
        Required for node operators willing to vote finalized blocks.
    VrfKeyLinkTransactionDTO:
      type: object
      required:
        - size
        - signature
        - signerPublicKey
        - version
        - network
        - type
        - maxFee
        - deadline
        - linkedPublicKey
        - linkAction
      properties:
        size:
          allOf:
            - $ref: '#/components/schemas/UInt32'
          description: Entity size in bytes.
        signature:
          $ref: '#/components/schemas/Signature'
        signerPublicKey:
          $ref: '#/components/schemas/PublicKey'
        version:
          type: integer
          description: Entity version.
          example: 1
        network:
          $ref: '#/components/schemas/NetworkTypeEnum'
        type:
          type: integer
          example: 32835
        maxFee:
          $ref: '#/components/schemas/Amount'
        deadline:
          $ref: '#/components/schemas/BlockDuration'
        linkedPublicKey:
          $ref: '#/components/schemas/PublicKey'
        linkAction:
          $ref: '#/components/schemas/LinkActionEnum'
      description: |-
        Transaction to link an account with a VRF public key.
        The key is used to randomize block production and leader/participant selection.
        Required for all harvesting eligible accounts.
    accountIds:
      type: object
      properties:
        publicKeys:
          type: array
          items:
            $ref: '#/components/schemas/PublicKey'
          description: Array of public keys.
        addresses:
          type: array
          items:
            $ref: '#/components/schemas/Address'
          description: Array of addresses.
    addresses:
      type: object
      properties:
        addresses:
          type: array
          items:
            $ref: '#/components/schemas/Address'
          description: Array of addresses.
    cosignature:
      type: object
      properties:
        parentHash:
          $ref: '#/components/schemas/Hash256'
        signature:
          $ref: '#/components/schemas/Signature'
        signerPublicKey:
          $ref: '#/components/schemas/PublicKey'
        version:
          $ref: '#/components/schemas/CosignatureVersion'
    mosaicIds:
      type: object
      properties:
        mosaicIds:
          type: array
          items:
            $ref: '#/components/schemas/MosaicId'
          description: Array of mosaic identifiers.
    namespaceIds:
      type: object
      properties:
        namespaceIds:
          type: array
          items:
            $ref: '#/components/schemas/NamespaceId'
          description: Array of namespace identifiers.
    transactionHashes:
      type: object
      properties:
        hashes:
          type: array
          items:
            $ref: '#/components/schemas/Hash256'
          description: Array of transaction hashes.
    transactionIds:
      type: object
      properties:
        transactionIds:
          type: array
          items:
            type: string
          description: Array of transaction identifiers.
    transactionPayload:
      type: object
      properties:
        payload:
          type: string
          description: Transaction payload in hexadecimal format.
          example: 0123456789ABCDEF
servers:
  - url: https://sym-test-03.opening-line.jp:3001
    description: TESTNET sym-test-03.opening-line.jp
    variables: {}
  - url: https://sym-test-01.opening-line.jp:3001
    description: TESTNET sym-test-01.opening-line.jp
    variables: {}
  - url: https://sym-main-03.opening-line.jp:3001
    description: MAINNET sym-main-03.opening-line.jp
    variables: {}
  - url: https://sym-main-02.opening-line.jp:3001
    description: MAINNET sym-main-02.opening-line.jp
    variables: {}
  - url: https://sym-main-01.opening-line.jp:3001
    description: MAINNET sym-main-01.opening-line.jp
    variables: {}
  - url: http://localhost:3000
    description: Local development
    variables: {}
